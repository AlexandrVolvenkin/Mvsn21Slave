#include "DM134.h"
#include "Platform.h"

//-----------------------------------------------------------------------------------------------------
CDM134::CDM134()
{
    Init();
}

//-----------------------------------------------------------------------------------------------------
CDM134::~CDM134()
{

}

//-----------------------------------------------------------------------------------------------------
void CDM134::Init(void)
{
    CPlatform::LedDriverClockOff();
    CPlatform::LedDriverSerialInOff();
    CPlatform::LedDriverLatchOn();
    CPlatform::LedDriverClockSetPinOutput();
    CPlatform::LedDriverSerialInSetPinOutput();
    CPlatform::LedDriverLatchSetPinOutput();
}

//-----------------------------------------------------------------------------------------------------
void CDM134::Set(uint8_t *puiLedState, uint8_t __farflash *puiLedMap, uint8_t uiLedNumber)
{
    for(unsigned char i = 0; i < uiLedNumber; i++)
    {
        uint8_t __farflash *puiLedState;

// номер лампы -> номер вывода.
//puiLedState[0]

        if(puiLedState[puiLedMap[i]])
        {
            CPlatform::LedDriverSerialInOn();
        }
        else
        {
            CPlatform::LedDriverSerialInOff();
        }

        CPlatform::LedDriverClockOn();
        CPlatform::LedDriverDelay1uS();
        CPlatform::LedDriverClockOff();
    }

    CPlatform::LedDriverLatchOff();
    CPlatform::LedDriverDelay5uS();
    CPlatform::LedDriverLatchOn();
}

//-----------------------------------------------------------------------------------------------------
//Вывод данных на драйвер светодиодов
//void HARD::SetDM134_(unsigned long Value)
//{
//    Value = HARD::PCBRoutingRemap(Value);	// Перекодирование данных под разводку
//
//    PORTF |=  BIT(HARD::EN1)|		// Устанавливаем EN1,EN2 = high
//              BIT(HARD::EN2);
//
//    for(unsigned char i = 0; i < 32; i++)
//    {
//        if(Value & 0x80000000) PORTF |= BIT(HARD::SIN);
//        else PORTF &= ~BIT(HARD::SIN);
//
//        PORTF &= ~BIT(HARD::CLOCK);		// Формируем тактовый импульс
//        __delay_cycles(1);
//        PORTF |=  BIT(HARD::CLOCK);
//
//        Value = Value << 1;			// Сдвигаем данные
//    }
//
//    PORTF &= ~BIT(HARD::LATCH);		// Формируем импульс LATCH
//    __delay_cycles(5);
//    PORTF |=  BIT(HARD::LATCH);
//
//    PORTF |=   BIT(HARD::CLOCK);		// Устанавливаем CLOCK   = high
//    PORTF &= ~(BIT(HARD::EN1)|		// Устанавливаем EN1,EN2 = low
//               BIT(HARD::EN2));
//};
//
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
//// Вывод данных на драйвера светодиодов
//void HARD::SendDM13C(unsigned long Value)
//{
//    Value = HARD::PCBRoutingRemap(Value);	// Перекодирование данных под разводку
//
//    PORTF |= BIT(HARD::EN1)|		// Устанавливаем EN1,EN2 = high
//             BIT(HARD::EN2);
//
//    for(unsigned char i = 0; i < 32; i++)
//    {
//        if(Value & 0x80000000L)
//        {
//            PORTF |= BIT(HARD::SIN);
//        }
//        else
//        {
//            PORTF &= ~BIT(HARD::SIN);
//        }
//
//        PORTF |=  BIT(HARD::CLOCK); 		// Формируем тактовый импульс (1 мкс)
//        __delay_cycles((short)(XTAL*1.00));
//        PORTF &= ~BIT(HARD::CLOCK);
//
//        Value = Value << 1;			// Сдвигаем данные
//    }
//
//    PORTF |=  BIT(HARD::LATCH);		// Формируем импульс LATCH (5 мкс)
//    __delay_cycles((short)(XTAL*5.00));
//    PORTF &= ~BIT(HARD::LATCH);
//
//    PORTF &= ~(BIT(HARD::EN1)|		// Устанавливаем EN1,EN2 = low
//               BIT(HARD::EN2));
//};
//
//
////------------------------------------------------------------------------------
//// Конфигурирование драйвера светодиодов
//void HARD::SendDM13C_Config2(void)
//{
//    volatile unsigned short Value = 0x0200;	//0x02A8;	// 0x0078;
//    volatile unsigned short Shift;
//
//    Shift = Value << 2;
//
//    PORTF |= BIT(HARD::EN1)|		// Устанавливаем EN1,EN2 = high
//             BIT(HARD::EN2);
//
//    for(unsigned char i = 0; i < 16; i++)
//    {
//        if(Shift & 0x8000) PORTF |= BIT(HARD::SIN);
//        else PORTF &= ~BIT(HARD::SIN);
//
//        PORTF |=  BIT(HARD::CLOCK); 		// Формируем тактовый импульс (1 мкс)
//        __delay_cycles((short)(XTAL*1.00));
//        PORTF &= ~BIT(HARD::CLOCK);
//
//        Shift = Shift << 1;			// Сдвигаем данные
//    }
//
//    PORTF &= ~BIT(HARD::SIN);		// Линия данных = Low
//    PORTF |=  BIT(HARD::LATCH);		// Линия Latch  = High
//
//    for(unsigned char i = 0; i < 4; i++)	// Выдаем 4 тактовых импульса
//    {
//        PORTF |=  BIT(HARD::CLOCK);
//        __delay_cycles((short)(XTAL*1.00));
//        PORTF &= ~BIT(HARD::CLOCK);
//    }
//
//    PORTF &= ~BIT(HARD::LATCH);		// Линия Latch = Low
//
//    for(unsigned char i = 0; i < 10; i++)
//    {
//        if(Value & BIT(9)) PORTF |= BIT(HARD::SIN);
//        else PORTF &= ~BIT(HARD::SIN);
//
//        PORTF |=  BIT(HARD::CLOCK); 		// Формируем тактовый импульс (1 мкс)
//        __delay_cycles((short)(XTAL*1.00));
//        PORTF &= ~BIT(HARD::CLOCK);
//
//        Value = Value << 1;			// Сдвигаем данные
//    }
//
//    PORTF |=  BIT(HARD::LATCH);		// Формируем импульс LATCH (5 мкс)
//    __delay_cycles((short)(XTAL*5.00));
//    PORTF &= ~BIT(HARD::LATCH);
//
//    PORTF &= ~(BIT(HARD::EN1)|	 	// Устанавливаем EN1,EN2 = low
//               BIT(HARD::EN2));
//};
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
//void HARD::SendDM13CTEST(unsigned short Bright)
//{
//    unsigned short Value = (Bright & 0x007F) << 3;
//    unsigned short Shift = Value << 2;
//
//    for(unsigned char i = 0; i < 16; i++)
//    {
//        if(Shift & 0x8000) PORTF |= BIT(HARD::SIN);
//        else PORTF &= ~BIT(HARD::SIN);
//
//        __delay_cycles((short)(XTAL*1.00));
//        PORTF |=  BIT(HARD::CLOCK); 		// Формируем тактовый импульс (1 мкс)
//        __delay_cycles((short)(XTAL*1.00));
//        PORTF &= ~BIT(HARD::CLOCK);
//
//        Shift = Shift << 1;			// Сдвигаем данные
//    };
//
//    PORTF &= ~BIT(HARD::SIN);		// Линия данных = Low
//    PORTF |=  BIT(HARD::LATCH);		// Линия Latch  = High
//
//    for(unsigned char i = 0; i < 4; i++)	// Выдаем 4 тактовых импульса
//    {
//        __delay_cycles((short)(XTAL*1.00));
//        PORTF |=  BIT(HARD::CLOCK);
//        __delay_cycles((short)(XTAL*1.00));
//        PORTF &= ~BIT(HARD::CLOCK);
//    };
//
//    PORTF &= ~BIT(HARD::LATCH);		// Линия Latch = Low
//
//    for(unsigned char i = 0; i < 10; i++)
//    {
//        if(Value & BIT(9)) PORTF |= BIT(HARD::SIN);
//        else PORTF &= ~BIT(HARD::SIN);
//
//        __delay_cycles((short)(XTAL*1.00));
//        PORTF |=  BIT(HARD::CLOCK); 		// Формируем тактовый импульс (1 мкс)
//        __delay_cycles((short)(XTAL*1.00));
//        PORTF &= ~BIT(HARD::CLOCK);
//
//        Value = Value << 1;			// Сдвигаем данные
//    };
//
//    PORTF |=  BIT(HARD::LATCH);		// Формируем импульс LATCH (5 мкс)
//    __delay_cycles((short)(XTAL*5.00));
//    PORTF &= ~BIT(HARD::LATCH);
//
//
//    PORTF &= ~BIT(HARD::SIN);		// Линия данных = Low
//    for(unsigned char i = 0; i < 16; i++)
//    {
//        __delay_cycles((short)(XTAL*1.00));
//        PORTF |=  BIT(HARD::CLOCK); 		// Формируем тактовый импульс (1 мкс)
//        __delay_cycles((short)(XTAL*1.00));
//        PORTF &= ~BIT(HARD::CLOCK);
//    };
//};
//
////------------------------------------------------------------------------------
//// Перекодирование данных под разводку PCB
//inline unsigned long HARD::PCBRoutingRemap(unsigned long Value)
//{
//    unsigned long Data = 0;
//
//    if(Value & (1UL << 0))  Data |= (1UL << 13);
//    if(Value & (1UL << 1))  Data |= (1UL << 15);
//    if(Value & (1UL << 2))  Data |= (1UL << 1);
//    if(Value & (1UL << 3))  Data |= (1UL << 2);
//
//    if(Value & (1UL << 8))  Data |= (1UL << 12);
//    if(Value & (1UL << 9))  Data |= (1UL << 14);
//    if(Value & (1UL << 10)) Data |= (1UL << 0);
//    if(Value & (1UL << 11)) Data |= (1UL << 3);
//
//    if(Value & (1UL << 16)) Data |= (1UL << 11);
//    if(Value & (1UL << 17)) Data |= (1UL << 9);
//    if(Value & (1UL << 18)) Data |= (1UL << 7);
//    if(Value & (1UL << 19)) Data |= (1UL << 4);
//
//    if(Value & (1UL << 24)) Data |= (1UL << 10);
//    if(Value & (1UL << 25)) Data |= (1UL << 8);
//    if(Value & (1UL << 26)) Data |= (1UL << 6);
//    if(Value & (1UL << 27)) Data |= (1UL << 5);
//
//    if(Value & (1UL << 4))  Data |= (1UL << 16+13);
//    if(Value & (1UL << 5))  Data |= (1UL << 16+14);
//    if(Value & (1UL << 6))  Data |= (1UL << 16+0);
//    if(Value & (1UL << 7))  Data |= (1UL << 16+2);
//
//    if(Value & (1UL << 12)) Data |= (1UL << 16+12);
//    if(Value & (1UL << 13)) Data |= (1UL << 16+15);
//    if(Value & (1UL << 14)) Data |= (1UL << 16+1);
//    if(Value & (1UL << 15)) Data |= (1UL << 16+3);
//
//    if(Value & (1UL << 20)) Data |= (1UL << 16+11);
//    if(Value & (1UL << 21)) Data |= (1UL << 16+9);
//    if(Value & (1UL << 22)) Data |= (1UL << 16+6);
//    if(Value & (1UL << 23)) Data |= (1UL << 16+4);
//
//    if(Value & (1UL << 28)) Data |= (1UL << 16+10);
//    if(Value & (1UL << 29)) Data |= (1UL << 16+8);
//    if(Value & (1UL << 30)) Data |= (1UL << 16+7);
//    if(Value & (1UL << 31)) Data |= (1UL << 16+5);
//
//    return Data;
//};
