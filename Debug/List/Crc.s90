///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.10.6.1378 for Atmel AVR          12/May/2022  18:15:06
// Copyright 1996-2018 IAR Systems AB.
//
//    Source file  =  D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\src\Crc.cpp
//    Command line =  
//        -f C:\Users\ghost\AppData\Local\Temp\EWF33C.tmp
//        (--string_literals_in_flash
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\src\Crc.cpp --cpu=m48
//        -ms -o D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Debug\Obj -lB
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Debug\List
//        --initializers_in_flash --root_variables --no_inline --no_cross_call
//        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\include\ -I
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Modbus\ --eeprom_size
//        256 --dlib --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
//        Workbench 8.0\avr\LIB\DLIB\dlAVR-1s-ec_mul-n.h" -Om --eec++)
//    Locale       =  Russian_RUS.1251
//    List file    =  
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Debug\List\Crc.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME Crc

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?EPILOGUE_B2_L09
        EXTERN ?PROLOGUE2_L09

        PUBLIC ??usCrc16
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR

// D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\src\Crc.cpp
//    1 #include <stdint.h>
//    2 #include "Crc.h"
//    3 
//    4 ////-----------------------------------------------------------------------------------------------------
//    5 //__flash const unsigned short usCRCTable[] =
//    6 //{
//    7 //    0X0000, 0XC0C1, 0XC181, 0X0140, 0XC301, 0X03C0, 0X0280, 0XC241,
//    8 //    0XC601, 0X06C0, 0X0780, 0XC741, 0X0500, 0XC5C1, 0XC481, 0X0440,
//    9 //    0XCC01, 0X0CC0, 0X0D80, 0XCD41, 0X0F00, 0XCFC1, 0XCE81, 0X0E40,
//   10 //    0X0A00, 0XCAC1, 0XCB81, 0X0B40, 0XC901, 0X09C0, 0X0880, 0XC841,
//   11 //    0XD801, 0X18C0, 0X1980, 0XD941, 0X1B00, 0XDBC1, 0XDA81, 0X1A40,
//   12 //    0X1E00, 0XDEC1, 0XDF81, 0X1F40, 0XDD01, 0X1DC0, 0X1C80, 0XDC41,
//   13 //    0X1400, 0XD4C1, 0XD581, 0X1540, 0XD701, 0X17C0, 0X1680, 0XD641,
//   14 //    0XD201, 0X12C0, 0X1380, 0XD341, 0X1100, 0XD1C1, 0XD081, 0X1040,
//   15 //    0XF001, 0X30C0, 0X3180, 0XF141, 0X3300, 0XF3C1, 0XF281, 0X3240,
//   16 //    0X3600, 0XF6C1, 0XF781, 0X3740, 0XF501, 0X35C0, 0X3480, 0XF441,
//   17 //    0X3C00, 0XFCC1, 0XFD81, 0X3D40, 0XFF01, 0X3FC0, 0X3E80, 0XFE41,
//   18 //    0XFA01, 0X3AC0, 0X3B80, 0XFB41, 0X3900, 0XF9C1, 0XF881, 0X3840,
//   19 //    0X2800, 0XE8C1, 0XE981, 0X2940, 0XEB01, 0X2BC0, 0X2A80, 0XEA41,
//   20 //    0XEE01, 0X2EC0, 0X2F80, 0XEF41, 0X2D00, 0XEDC1, 0XEC81, 0X2C40,
//   21 //    0XE401, 0X24C0, 0X2580, 0XE541, 0X2700, 0XE7C1, 0XE681, 0X2640,
//   22 //    0X2200, 0XE2C1, 0XE381, 0X2340, 0XE101, 0X21C0, 0X2080, 0XE041,
//   23 //    0XA001, 0X60C0, 0X6180, 0XA141, 0X6300, 0XA3C1, 0XA281, 0X6240,
//   24 //    0X6600, 0XA6C1, 0XA781, 0X6740, 0XA501, 0X65C0, 0X6480, 0XA441,
//   25 //    0X6C00, 0XACC1, 0XAD81, 0X6D40, 0XAF01, 0X6FC0, 0X6E80, 0XAE41,
//   26 //    0XAA01, 0X6AC0, 0X6B80, 0XAB41, 0X6900, 0XA9C1, 0XA881, 0X6840,
//   27 //    0X7800, 0XB8C1, 0XB981, 0X7940, 0XBB01, 0X7BC0, 0X7A80, 0XBA41,
//   28 //    0XBE01, 0X7EC0, 0X7F80, 0XBF41, 0X7D00, 0XBDC1, 0XBC81, 0X7C40,
//   29 //    0XB401, 0X74C0, 0X7580, 0XB541, 0X7700, 0XB7C1, 0XB681, 0X7640,
//   30 //    0X7200, 0XB2C1, 0XB381, 0X7340, 0XB101, 0X71C0, 0X7080, 0XB041,
//   31 //    0X5000, 0X90C1, 0X9181, 0X5140, 0X9301, 0X53C0, 0X5280, 0X9241,
//   32 //    0X9601, 0X56C0, 0X5780, 0X9741, 0X5500, 0X95C1, 0X9481, 0X5440,
//   33 //    0X9C01, 0X5CC0, 0X5D80, 0X9D41, 0X5F00, 0X9FC1, 0X9E81, 0X5E40,
//   34 //    0X5A00, 0X9AC1, 0X9B81, 0X5B40, 0X9901, 0X59C0, 0X5880, 0X9841,
//   35 //    0X8801, 0X48C0, 0X4980, 0X8941, 0X4B00, 0X8BC1, 0X8A81, 0X4A40,
//   36 //    0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
//   37 //    0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
//   38 //    0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040
//   39 //};
//   40 //
//   41 ////-----------------------------------------------------------------------------------------------------
//   42 //uint16_t usCrc16(const unsigned char *puiSourse, uint16_t uiLength)
//   43 //{
//   44 //    unsigned char ucTemp;
//   45 //    uint16_t usCrc = 0xFFFF;
//   46 //
//   47 ////    while (uiLength--)
//   48 ////    {
//   49 ////        ucTemp = *puiSourse++ ^ usCrc;
//   50 ////        usCrc >>= 8;
//   51 ////        usCrc  ^= usCRCTable[ucTemp];
//   52 ////    }
//   53 //
//   54 //    for (uint8_t i = 0; i < uiLength; i++)
//   55 //    {
//   56 //        ucTemp = *puiSourse++ ^ usCrc;
//   57 //        usCrc >>= 8;
//   58 //        usCrc  ^= usCRCTable[ucTemp];
//   59 //    }
//   60 //
//   61 //    return usCrc;
//   62 //}
//   63 
//   64 
//   65 //--------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//   66 unsigned short usCrc16(unsigned char *puiSourse, unsigned short uiLength)
??usCrc16:
//   67 {
        RCALL   ?PROLOGUE2_L09
        MOVW    R31:R30, R17:R16
        MOVW    R25:R24, R19:R18
//   68     unsigned short usCrc = 0xFFFF;
        LDI     R18, 255
        LDI     R19, 255
        RJMP    ??usCrc16_1
//   69     unsigned char ucCounter;
//   70 
//   71     while (uiLength != 0)
//   72     {
//   73         usCrc = usCrc ^ (unsigned short)(*puiSourse++);
//   74         ucCounter = 8;
//   75         while(ucCounter != 0)
//   76         {
//   77             if (usCrc & 0x0001)
//   78             {
//   79                 usCrc = usCrc >> 1 ^ 0xA001;
//   80             }
//   81             else usCrc = usCrc >> 1;
//   82             ucCounter--;
//   83         }
//   84         uiLength--;
??usCrc16_2:
        SBIW    R25:R24, 1
??usCrc16_1:
        MOV     R16, R24
        OR      R16, R25
        BREQ    ??usCrc16_3
        LD      R16, Z+
        EOR     R18, R16
        LDI     R16, 8
        RJMP    ??usCrc16_4
??usCrc16_5:
        DEC     R16
??usCrc16_4:
        TST     R16
        BREQ    ??usCrc16_2
        MOVW    R21:R20, R19:R18
        LSR     R21
        ROR     R20
        BST     R18, 0
        MOVW    R19:R18, R21:R20
        BRTC    ??usCrc16_5
        LDI     R17, 1
        EOR     R18, R17
        LDI     R17, 160
        EOR     R19, R17
        RJMP    ??usCrc16_5
//   85     }
//   86     usCrc = usCrc>>8 ^ usCrc<<8;
??usCrc16_3:
        MOVW    R21:R20, R19:R18
        MOVW    R17:R16, R19:R18
//   87 
//   88     unsigned short usData;
//   89     usData = (usCrc >> 8);
//   90     usData |= (usCrc << 8);
//   91     return usData;
        LDI     R17, 0
        OR      R17, R21
        LDI     R30, 2
        RJMP    ?EPILOGUE_B2_L09
//   92 }

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        END
//   93 
//   94 ////-----------------------------------------------------------------------------------------------------
//   95 //int iCrc16Check(unsigned char *puiSourse, unsigned short uiLength)
//   96 //{
//   97 //    unsigned short usCrc;
//   98 //
//   99 //    usCrc = (((unsigned short)(puiSourse[uiLength])) << 8) |
//  100 //            (unsigned short)(puiSourse[uiLength + 1]);
//  101 //
//  102 //    if (usCrc16(puiSourse, uiLength) == usCrc)
//  103 //    {
//  104 //        return 0;
//  105 //    }
//  106 //    else
//  107 //    {
//  108 //        return -1;
//  109 //    }
//  110 //}
//  111 
//  112 ////-----------------------------------------------------------------------------------------------------
//  113 //// вычисляет двухбайтовую контрольную сумму.
//  114 //unsigned short usCrcSummTwoByteCalculation(
//  115 //    unsigned char *puiSourse,
//  116 //    unsigned int nuiNbyte)
//  117 //{
//  118 //    unsigned short usData;
//  119 //
//  120 //    usData = 0;
//  121 //    do
//  122 //    {
//  123 //        usData += (unsigned short)*puiSourse++;
//  124 //        nuiNbyte--;
//  125 //    }
//  126 //    while (nuiNbyte);
//  127 //
//  128 //    return usData;
//  129 //}
//  130 //
//  131 ////-----------------------------------------------------------------------------------------------------
//  132 //// сравнивает двухбайтовую контрольную сумму.
//  133 //int iCrcSummTwoByteCompare(unsigned char *puiSourse,
//  134 //                           unsigned int nuiNbyte)
//  135 //{
//  136 //    unsigned short usData;
//  137 //
//  138 //    usData = 0;
//  139 //    do
//  140 //    {
//  141 //        usData += (unsigned short)*puiSourse++;
//  142 //        nuiNbyte--;
//  143 //    }
//  144 //    while (nuiNbyte);
//  145 //
//  146 //    if ((unsigned char)usData  == *puiSourse++)
//  147 //    {
//  148 //
//  149 //        if ((unsigned char)(usData >> 8)  == *puiSourse)
//  150 //        {
//  151 //            return 1;
//  152 //        }
//  153 //    }
//  154 //    return 0;
//  155 //}
//  156 
//  157 ////-----------------------------------------------------------------------------------------------------
//  158 //// вычисляет однобайтовую контрольную сумму.
//  159 //uint8_t usCrcSummOneByteCalculation(
//  160 //    uint8_t *puiSourse,
//  161 //    uint16_t nuiNbyte)
//  162 //{
//  163 //    uint8_t uiData = 0;
//  164 //
//  165 //    for (int8_t i = 0; i < nuiNbyte; i++)
//  166 //    {
//  167 //        uiData += puiSourse[i];
//  168 //    }
//  169 //
//  170 //    return uiData;
//  171 //}
//  172 
//  173 ////-----------------------------------------------------------------------------------------------------
//  174 //// сравнивает однобайтовую контрольную сумму.
//  175 //int iCrcSummOneByteCompare(unsigned char *puiSourse,
//  176 //                           unsigned int nuiNbyte)
//  177 //{
//  178 //    unsigned char ucData;
//  179 //
//  180 //    ucData = 0;
//  181 //    do
//  182 //    {
//  183 //        ucData += *puiSourse++;
//  184 //        nuiNbyte--;
//  185 //    }
//  186 //    while ((nuiNbyte) != 0);
//  187 //
//  188 //    if (ucData == *puiSourse)
//  189 //    {
//  190 //        return 1;
//  191 //    }
//  192 //    else
//  193 //    {
//  194 //        return 0;
//  195 //    }
//  196 //}
//  197 
// 
// 68 bytes in segment CODE
// 
// 68 bytes of CODE memory
//
//Errors: none
//Warnings: none
