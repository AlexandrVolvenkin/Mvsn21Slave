///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.10.6.1378 for Atmel AVR          21/May/2022  23:17:18
// Copyright 1996-2018 IAR Systems AB.
//
//    Source file  =  
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Modbus\Modbus.cpp
//    Command line =  
//        -f C:\Users\ghost\AppData\Local\Temp\EWF2BB.tmp
//        (--string_literals_in_flash
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Modbus\Modbus.cpp
//        --cpu=m48 -ms -o
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Debug\Obj -lB
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Debug\List
//        --initializers_in_flash --root_variables --no_inline --no_cross_call
//        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\include\ -I
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Modbus\ --eeprom_size
//        256 --dlib --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
//        Workbench 8.0\avr\LIB\DLIB\dlAVR-1s-ec_mul-n.h" -Om --eec++)
//    Locale       =  Russian_RUS.1251
//    List file    =  
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Debug\List\Modbus.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME Modbus

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?EPILOGUE_B2_L09
        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?EPILOGUE_B5_L09
        EXTERN ?EPILOGUE_B8_L09
        EXTERN ?PROLOGUE2_L09
        EXTERN ?PROLOGUE4_L09
        EXTERN ?PROLOGUE5_L09
        EXTERN ?PROLOGUE8_L09
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R6_is_cg_reg
        EXTERN ?Register_R7_is_cg_reg
        EXTERN ?S_SHL_L02
        EXTERN ?US_SHR_L02
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBLIC ??ByteToBitPack
        PUBLIC ??ReadDiscreteInputs
        PUBLIC ??Reply
        PUBLIC ??ResponseException
        PUBLIC ??ResponseIsReceived
        PUBLIC ??SendMessage
        PUBLIC ??SlaveSet
        PUBLIC ??m_puiDiscreteInputs
        PUBLIC ??m_puiRxBuffer
        PUBLIC ??m_puiTxBuffer
        PUBLIC ??m_uiDiscreteInputsNumber
        PUBLIC ??m_uiFlowControl
        PUBLIC ??m_uiFunctionCode
        PUBLIC ??m_uiLastSystemTime
        PUBLIC ??m_uiMessageLength
        PUBLIC ??m_uiOwnAddress
        PUBLIC ??m_uiQuantity
        PUBLIC ??m_uiSlaveAddress
        PUBWEAK _A_ACSR
        PUBWEAK _A_ADC
        PUBWEAK _A_ADCSRA
        PUBWEAK _A_ADCSRB
        PUBWEAK _A_ADMUX
        PUBWEAK _A_ASSR
        PUBWEAK _A_CLKPR
        PUBWEAK _A_DDRB
        PUBWEAK _A_DDRC
        PUBWEAK _A_DDRD
        PUBWEAK _A_DIDR0
        PUBWEAK _A_DIDR1
        PUBWEAK _A_EEAR
        PUBWEAK _A_EECR
        PUBWEAK _A_EEDR
        PUBWEAK _A_EICRA
        PUBWEAK _A_EIFR
        PUBWEAK _A_EIMSK
        PUBWEAK _A_GPIOR0
        PUBWEAK _A_GPIOR1
        PUBWEAK _A_GPIOR2
        PUBWEAK _A_GTCCR
        PUBWEAK _A_ICR1
        PUBWEAK _A_MCUCR
        PUBWEAK _A_MCUSR
        PUBWEAK _A_OCR0A
        PUBWEAK _A_OCR0B
        PUBWEAK _A_OCR1A
        PUBWEAK _A_OCR1B
        PUBWEAK _A_OCR2A
        PUBWEAK _A_OCR2B
        PUBWEAK _A_OSCCAL
        PUBWEAK _A_PCICR
        PUBWEAK _A_PCIFR
        PUBWEAK _A_PCMSK0
        PUBWEAK _A_PCMSK1
        PUBWEAK _A_PCMSK2
        PUBWEAK _A_PINB
        PUBWEAK _A_PINC
        PUBWEAK _A_PIND
        PUBWEAK _A_PORTB
        PUBWEAK _A_PORTC
        PUBWEAK _A_PORTD
        PUBWEAK _A_PRR
        PUBWEAK _A_SMCR
        PUBWEAK _A_SP
        PUBWEAK _A_SPCR
        PUBWEAK _A_SPDR
        PUBWEAK _A_SPMCSR
        PUBWEAK _A_SPSR
        PUBWEAK _A_SREG
        PUBWEAK _A_TCCR0A
        PUBWEAK _A_TCCR0B
        PUBWEAK _A_TCCR1A
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TCCR1C
        PUBWEAK _A_TCCR2A
        PUBWEAK _A_TCCR2B
        PUBWEAK _A_TCNT0
        PUBWEAK _A_TCNT1
        PUBWEAK _A_TCNT2
        PUBWEAK _A_TIFR0
        PUBWEAK _A_TIFR1
        PUBWEAK _A_TIFR2
        PUBWEAK _A_TIMSK0
        PUBWEAK _A_TIMSK1
        PUBWEAK _A_TIMSK2
        PUBWEAK _A_TWAMR
        PUBWEAK _A_TWAR
        PUBWEAK _A_TWBR
        PUBWEAK _A_TWCR
        PUBWEAK _A_TWDR
        PUBWEAK _A_TWSR
        PUBWEAK _A_UBRR0
        PUBWEAK _A_UCSR0A
        PUBWEAK _A_UCSR0B
        PUBWEAK _A_UCSR0C
        PUBWEAK _A_UDR0
        PUBWEAK _A_WDTCSR
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR

`?<Name CModbus 1>` SYMBOL "CModbus"
??m_puiDiscreteInputs SYMBOL "m_puiDiscreteInputs", `?<Name CModbus 1>`
??m_puiRxBuffer     SYMBOL "m_puiRxBuffer", `?<Name CModbus 1>`
??m_puiTxBuffer     SYMBOL "m_puiTxBuffer", `?<Name CModbus 1>`
??m_uiDiscreteInputsNumber SYMBOL "m_uiDiscreteInputsNumber", `?<Name CModbus 1>`
??m_uiFlowControl   SYMBOL "m_uiFlowControl", `?<Name CModbus 1>`
??m_uiFunctionCode  SYMBOL "m_uiFunctionCode", `?<Name CModbus 1>`
??m_uiLastSystemTime SYMBOL "m_uiLastSystemTime", `?<Name CModbus 1>`
??m_uiMessageLength SYMBOL "m_uiMessageLength", `?<Name CModbus 1>`
??m_uiOwnAddress    SYMBOL "m_uiOwnAddress", `?<Name CModbus 1>`
??m_uiQuantity      SYMBOL "m_uiQuantity", `?<Name CModbus 1>`
??m_uiSlaveAddress  SYMBOL "m_uiSlaveAddress", `?<Name CModbus 1>`

        EXTERN ??ResponseBasis
        EXTERN ??Send
        EXTERN ??Tail

// D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Modbus\Modbus.cpp
//    1 //-----------------------------------------------------------------------------------------------------
//    2 //  Sourse      : FileName.cpp
//    3 //  Created     : 01.06.2022
//    4 //  Author      : Alexandr Volvenkin
//    5 //  email       : aav-36@mail.ru
//    6 //  GitHub      : https://github.com/AlexandrVolvenkin
//    7 //-----------------------------------------------------------------------------------------------------
//    8 
//    9 #include "Modbus.h"

        ASEGN ABSOLUTE:DATA:ROOT,0c6H
// union <unnamed> volatile __io _A_UDR0
_A_UDR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0c4H
// union <unnamed> volatile __io _A_UBRR0
_A_UBRR0:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,0c2H
// union <unnamed> volatile __io _A_UCSR0C
_A_UCSR0C:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0c1H
// union <unnamed> volatile __io _A_UCSR0B
_A_UCSR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0c0H
// union <unnamed> volatile __io _A_UCSR0A
_A_UCSR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0bdH
// union <unnamed> volatile __io _A_TWAMR
_A_TWAMR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0bcH
// union <unnamed> volatile __io _A_TWCR
_A_TWCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0bbH
// union <unnamed> volatile __io _A_TWDR
_A_TWDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0baH
// union <unnamed> volatile __io _A_TWAR
_A_TWAR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b9H
// union <unnamed> volatile __io _A_TWSR
_A_TWSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b8H
// union <unnamed> volatile __io _A_TWBR
_A_TWBR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b6H
// union <unnamed> volatile __io _A_ASSR
_A_ASSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b4H
// union <unnamed> volatile __io _A_OCR2B
_A_OCR2B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b3H
// union <unnamed> volatile __io _A_OCR2A
_A_OCR2A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b2H
// union <unnamed> volatile __io _A_TCNT2
_A_TCNT2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b1H
// union <unnamed> volatile __io _A_TCCR2B
_A_TCCR2B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b0H
// union <unnamed> volatile __io _A_TCCR2A
_A_TCCR2A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,08aH
// union <unnamed> volatile __io _A_OCR1B
_A_OCR1B:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,088H
// union <unnamed> volatile __io _A_OCR1A
_A_OCR1A:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,086H
// union <unnamed> volatile __io _A_ICR1
_A_ICR1:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,084H
// union <unnamed> volatile __io _A_TCNT1
_A_TCNT1:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,082H
// union <unnamed> volatile __io _A_TCCR1C
_A_TCCR1C:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,081H
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,080H
// union <unnamed> volatile __io _A_TCCR1A
_A_TCCR1A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07fH
// union <unnamed> volatile __io _A_DIDR1
_A_DIDR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07eH
// union <unnamed> volatile __io _A_DIDR0
_A_DIDR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07cH
// union <unnamed> volatile __io _A_ADMUX
_A_ADMUX:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07bH
// union <unnamed> volatile __io _A_ADCSRB
_A_ADCSRB:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07aH
// union <unnamed> volatile __io _A_ADCSRA
_A_ADCSRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,078H
// union <unnamed> volatile __io _A_ADC
_A_ADC:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,070H
// union <unnamed> volatile __io _A_TIMSK2
_A_TIMSK2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06fH
// union <unnamed> volatile __io _A_TIMSK1
_A_TIMSK1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06eH
// union <unnamed> volatile __io _A_TIMSK0
_A_TIMSK0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06dH
// union <unnamed> volatile __io _A_PCMSK2
_A_PCMSK2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06cH
// union <unnamed> volatile __io _A_PCMSK1
_A_PCMSK1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06bH
// union <unnamed> volatile __io _A_PCMSK0
_A_PCMSK0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,069H
// union <unnamed> volatile __io _A_EICRA
_A_EICRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,068H
// union <unnamed> volatile __io _A_PCICR
_A_PCICR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,066H
// union <unnamed> volatile __io _A_OSCCAL
_A_OSCCAL:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,064H
// union <unnamed> volatile __io _A_PRR
_A_PRR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,061H
// union <unnamed> volatile __io _A_CLKPR
_A_CLKPR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,060H
// union <unnamed> volatile __io _A_WDTCSR
_A_WDTCSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,05fH
// union <unnamed> volatile __io _A_SREG
_A_SREG:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,05dH
// union <unnamed> volatile __io _A_SP
_A_SP:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,057H
// union <unnamed> volatile __io _A_SPMCSR
_A_SPMCSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,055H
// union <unnamed> volatile __io _A_MCUCR
_A_MCUCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,054H
// union <unnamed> volatile __io _A_MCUSR
_A_MCUSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,053H
// union <unnamed> volatile __io _A_SMCR
_A_SMCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,050H
// union <unnamed> volatile __io _A_ACSR
_A_ACSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04eH
// union <unnamed> volatile __io _A_SPDR
_A_SPDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04dH
// union <unnamed> volatile __io _A_SPSR
_A_SPSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04cH
// union <unnamed> volatile __io _A_SPCR
_A_SPCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04bH
// union <unnamed> volatile __io _A_GPIOR2
_A_GPIOR2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04aH
// union <unnamed> volatile __io _A_GPIOR1
_A_GPIOR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,048H
// union <unnamed> volatile __io _A_OCR0B
_A_OCR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,047H
// union <unnamed> volatile __io _A_OCR0A
_A_OCR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,046H
// union <unnamed> volatile __io _A_TCNT0
_A_TCNT0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,045H
// union <unnamed> volatile __io _A_TCCR0B
_A_TCCR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,044H
// union <unnamed> volatile __io _A_TCCR0A
_A_TCCR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,043H
// union <unnamed> volatile __io _A_GTCCR
_A_GTCCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,041H
// union <unnamed> volatile __io _A_EEAR
_A_EEAR:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,040H
// union <unnamed> volatile __io _A_EEDR
_A_EEDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03fH
// union <unnamed> volatile __io _A_EECR
_A_EECR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03eH
// union <unnamed> volatile __io _A_GPIOR0
_A_GPIOR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03dH
// union <unnamed> volatile __io _A_EIMSK
_A_EIMSK:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03cH
// union <unnamed> volatile __io _A_EIFR
_A_EIFR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03bH
// union <unnamed> volatile __io _A_PCIFR
_A_PCIFR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,037H
// union <unnamed> volatile __io _A_TIFR2
_A_TIFR2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,036H
// union <unnamed> volatile __io _A_TIFR1
_A_TIFR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,035H
// union <unnamed> volatile __io _A_TIFR0
_A_TIFR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,02bH
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,02aH
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,029H
// union <unnamed> volatile __io _A_PIND
_A_PIND:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,028H
// union <unnamed> volatile __io _A_PORTC
_A_PORTC:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,027H
// union <unnamed> volatile __io _A_DDRC
_A_DDRC:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,026H
// union <unnamed> volatile __io _A_PINC
_A_PINC:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,025H
// union <unnamed> volatile __io _A_PORTB
_A_PORTB:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,024H
// union <unnamed> volatile __io _A_DDRB
_A_DDRB:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,023H
// union <unnamed> volatile __io _A_PINB
_A_PINB:
        DS8 1
//   10 #include "ModbusRTU.h"
//   11 #include "Platform.h"
//   12 
//   13 

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   14 uint8_t CModbus::m_uiOwnAddress;
//   15 uint8_t CModbus::m_uiSlaveAddress;
//   16 uint8_t CModbus::m_uiFunctionCode;
//   17 uint16_t CModbus::m_uiQuantity;
//   18 uint8_t CModbus::m_uiFlowControl;
//   19 uint16_t CModbus::m_uiLastSystemTime;
//   20 uint16_t CModbus::m_uiMessageLength;
??m_uiMessageLength:
        DS8 2
??m_uiOwnAddress:
        DS8 1

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
??m_uiSlaveAddress:
        DS8 1

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
??m_uiFunctionCode:
        DS8 1

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
??m_uiQuantity:
        DS8 2

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
??m_uiFlowControl:
        DS8 1

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
??m_uiLastSystemTime:
        DS8 2

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   21 uint8_t *CModbus::m_puiRxBuffer;
??m_puiRxBuffer:
        DS8 2

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   22 uint8_t *CModbus::m_puiTxBuffer;
??m_puiTxBuffer:
        DS8 2

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   23 uint8_t *CModbus::m_puiDiscreteInputs;
??m_puiDiscreteInputs:
        DS8 2
//   24 uint16_t CModbus::m_uiDiscreteInputsNumber;
??m_uiDiscreteInputsNumber:
        DS8 2
//   25 
//   26 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//   27 void CModbus::SlaveSet(uint8_t uiSlave)
??SlaveSet:
//   28 {
//   29     m_uiOwnAddress = uiSlave;
        STS     (??m_uiMessageLength + 2), R16
//   30 }
        RET
//   31 
//   32 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//   33 int16_t CModbus::SendMessage(uint8_t *puiMessage, uint16_t uiLength)
??SendMessage:
//   34 {
        RCALL   ?PROLOGUE2_L09
        MOVW    R25:R24, R17:R16
//   35     uiLength = CModbusRTU::Tail(puiMessage, uiLength);
        RCALL   ??Tail
        MOVW    R19:R18, R17:R16
//   36     return CModbusRTU::Send(puiMessage, uiLength);
        MOVW    R17:R16, R25:R24
        RCALL   ??Send
        LDI     R30, 2
        RJMP    ?EPILOGUE_B2_L09
//   37 }
//   38 
//   39 //-----------------------------------------------------------------------------------------------------
//   40 /* Build the exception response */

        RSEG CODE:CODE:NOROOT(1)
//   41 int16_t CModbus::ResponseException(uint8_t uiSlave, uint8_t uiFunctionCode, uint8_t uiExceptionCode, uint8_t *puiResponse)
??ResponseException:
//   42 {
        RCALL   ?PROLOGUE4_L09
        MOV     R24, R18
        MOVW    R27:R26, R21:R20
//   43     int16_t uiLength;
//   44 
//   45     uiLength = CModbusRTU::ResponseBasis(uiSlave, (uiFunctionCode | 0x80), puiResponse);
        MOVW    R19:R18, R27:R26
        ORI     R17, 0x80
        RCALL   ??ResponseBasis
//   46     /* Positive exception code */
//   47     puiResponse[uiLength++] = uiExceptionCode;
        ADD     R26, R16
        ADC     R27, R17
        ST      X, R24
//   48 
//   49     return uiLength;
        SUBI    R16, 255
        SBCI    R17, 255
        LDI     R30, 4
        RJMP    ?EPILOGUE_B4_L09
//   50 }
//   51 
//   52 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//   53 uint8_t CModbus::ResponseIsReceived(void)
??ResponseIsReceived:
//   54 {
//   55     if (m_uiFlowControl  == IDDLE)
        LDS     R16, ??m_uiFlowControl
        TST     R16
        BRNE    ??ResponseIsReceived_1
//   56     {
//   57         return 1;
        LDI     R16, 1
        RET
//   58     }
//   59     else
//   60     {
//   61         return 0;
??ResponseIsReceived_1:
        LDI     R16, 0
        RET
//   62     }
//   63 };
//   64 
//   65 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//   66 int16_t CModbus::ByteToBitPack(uint16_t uiAddress,
??ByteToBitPack:
//   67                                uint16_t uiNumberB,
//   68                                uint8_t *m_puiCoils,
//   69                                uint8_t *puiResponse,
//   70                                uint16_t uiLength)
//   71 {
        RCALL   ?PROLOGUE5_L09
        REQUIRE ?Register_R4_is_cg_reg
        MOVW    R1:R0, R17:R16
        MOVW    R3:R2, R21:R20
//   72     uint8_t uiData = 0;
        LDI     R21, 0
//   73     uint8_t uiShift = 0;
        CLR     R4
//   74     for (uint16_t i = 0; i < uiNumberB; i++)
        LDI     R26, 0
        LDI     R27, 0
        LDD     R24, Y+5
        LDD     R25, Y+6
        RJMP    ??ByteToBitPack_1
//   75     {
//   76         if (m_puiCoils[uiAddress++])
//   77         {
//   78             uiData |= (1 << uiShift);
//   79         }
//   80         // Byte is full?
//   81         if (uiShift == 7)
//   82         {
//   83             puiResponse[uiLength++] = uiData;
//   84             uiData = 0;
//   85             uiShift = 0;
//   86         }
//   87         else
//   88         {
//   89             uiShift++;
??ByteToBitPack_2:
        INC     R4
//   90         }
??ByteToBitPack_3:
        ADIW    R27:R26, 1
??ByteToBitPack_1:
        CP      R26, R18
        CPC     R27, R19
        BRCC    ??ByteToBitPack_4
        MOVW    R17:R16, R1:R0
        MOVW    R31:R30, R17:R16
        ADIW    R31:R30, 1
        MOVW    R1:R0, R31:R30
        MOVW    R31:R30, R3:R2
        ADD     R30, R16
        ADC     R31, R17
        LD      R16, Z
        TST     R16
        BREQ    ??ByteToBitPack_5
        LDI     R16, 1
        LDI     R17, 0
        MOV     R20, R4
        RCALL   ?S_SHL_L02
        OR      R21, R16
??ByteToBitPack_5:
        LDI     R16, 7
        CP      R4, R16
        BRNE    ??ByteToBitPack_2
        MOVW    R31:R30, R23:R22
        ADD     R30, R24
        ADC     R31, R25
        ST      Z, R21
        ADIW    R25:R24, 1
        LDI     R21, 0
        CLR     R4
        RJMP    ??ByteToBitPack_3
//   91     }
//   92 
//   93     if (uiShift != 0)
??ByteToBitPack_4:
        TST     R4
        BREQ    ??ByteToBitPack_6
//   94     {
//   95         puiResponse[uiLength++] = uiData;
        ADD     R22, R24
        ADC     R23, R25
        MOVW    R31:R30, R23:R22
        ST      Z, R21
        ADIW    R25:R24, 1
//   96     }
//   97 
//   98     return uiLength;
??ByteToBitPack_6:
        MOVW    R17:R16, R25:R24
        LDI     R30, 7
        RJMP    ?EPILOGUE_B5_L09
//   99 }
//  100 
//  101 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  102 int16_t CModbus::ReadDiscreteInputs(uint8_t *puiRequest, uint8_t *puiResponse, uint16_t uiLength)
??ReadDiscreteInputs:
//  103 {
        RCALL   ?PROLOGUE8_L09
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        MOVW    R31:R30, R17:R16
        MOVW    R25:R24, R19:R18
//  104     uint16_t uiOffset = HEADER_LENGTH;
//  105     int8_t uiSlave = puiRequest[uiOffset - 1];
        LD      R16, Z
//  106     int8_t uiFunctionCode = puiRequest[uiOffset];
        LDD     R17, Z+1
//  107     uint16_t uiAddress = ((static_cast<uint16_t>(puiRequest[uiOffset + 1]) << 8) |
//  108                           (static_cast<uint16_t>(puiRequest[uiOffset + 2])));
        LDD     R7, Z+2
        CLR     R6
        LDD     R18, Z+3
        OR      R6, R18
//  109 
//  110     uint16_t uiNumberB = ((static_cast<uint16_t>(puiRequest[uiOffset + 3]) << 8) |
//  111                           (static_cast<uint16_t>(puiRequest[uiOffset + 4])));
        LDD     R27, Z+4
        LDI     R26, 0
        LDD     R18, Z+5
        OR      R26, R18
//  112 
//  113     if (uiNumberB < 1 || MODBUS_MAX_READ_BITS < uiNumberB)
        OR      R18, R27
        BREQ    ??ReadDiscreteInputs_1
        CPI     R26, 209
        LDI     R18, 7
        CPC     R27, R18
        BRCS    ??ReadDiscreteInputs_2
//  114     {
//  115         uiLength = ResponseException(uiSlave,
//  116                                      uiFunctionCode,
//  117                                      MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE,
//  118                                      puiResponse);
??ReadDiscreteInputs_1:
        MOVW    R21:R20, R25:R24
        LDI     R18, 3
        RJMP    ??ReadDiscreteInputs_3
//  119     }
//  120     else if ((uiAddress + uiNumberB) > m_uiDiscreteInputsNumber)
??ReadDiscreteInputs_2:
        LDI     R30, LOW(??m_puiDiscreteInputs)
        LDI     R31, (??m_puiDiscreteInputs) >> 8
        LDD     R18, Z+2
        LDD     R19, Z+3
        MOVW    R21:R20, R7:R6
        ADD     R20, R26
        ADC     R21, R27
        CP      R18, R20
        CPC     R19, R21
        BRCC    ??ReadDiscreteInputs_4
//  121     {
//  122         uiLength = ResponseException(uiSlave,
//  123                                      uiFunctionCode,
//  124                                      MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS,
//  125                                      puiResponse);
        MOVW    R21:R20, R25:R24
        LDI     R18, 2
??ReadDiscreteInputs_3:
        RCALL   ??ResponseException
        RJMP    ??ReadDiscreteInputs_5
//  126     }
//  127     else
//  128     {
//  129         uiLength = CModbusRTU::ResponseBasis(uiSlave, uiFunctionCode, puiResponse);
??ReadDiscreteInputs_4:
        MOVW    R19:R18, R25:R24
        RCALL   ??ResponseBasis
        MOVW    R19:R18, R17:R16
//  130 
//  131         if (uiNumberB % 8)
        MOVW    R31:R30, R25:R24
        ADD     R30, R16
        ADC     R31, R17
        LDI     R20, 3
        MOVW    R17:R16, R27:R26
        RCALL   ?US_SHR_L02
        MOVW    R21:R20, R17:R16
        MOV     R16, R26
        ANDI    R16, 0x07
        BREQ    ??ReadDiscreteInputs_6
//  132         {
//  133             puiResponse[uiLength++] = ((uiNumberB / 8) + 1);
        INC     R20
//  134         }
//  135         else
//  136         {
//  137             puiResponse[uiLength++] = (uiNumberB / 8);
??ReadDiscreteInputs_6:
        ST      Z, R20
        SUBI    R18, 255
        SBCI    R19, 255
//  138         }
//  139         uiLength = ByteToBitPack(uiAddress,
//  140                                  uiNumberB,
//  141                                  m_puiDiscreteInputs,
//  142                                  puiResponse,
//  143                                  uiLength);
        ST      -Y, R19
        ST      -Y, R18
        MOVW    R23:R22, R25:R24
        LDI     R30, LOW(??m_puiDiscreteInputs)
        LDI     R31, (??m_puiDiscreteInputs) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        MOVW    R19:R18, R27:R26
        MOVW    R17:R16, R7:R6
        RCALL   ??ByteToBitPack
??ReadDiscreteInputs_5:
        MOVW    R19:R18, R17:R16
//  144     }
//  145     return uiLength;
        MOVW    R17:R16, R19:R18
        LDI     R30, 8
        RJMP    ?EPILOGUE_B8_L09
//  146 }
//  147 
//  148 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  149 int16_t CModbus::Reply(uint8_t *puiRequest, uint8_t *puiResponse, uint16_t uiFrameLength)
??Reply:
//  150 {
//  151     uint16_t uiOffset = HEADER_LENGTH;
//  152     uint8_t uiSlave = puiRequest[uiOffset - 1];
        MOVW    R31:R30, R17:R16
        LD      R23, Z
//  153     uint8_t uiFunctionCode = puiRequest[uiOffset];
        LDD     R22, Z+1
        LDS     R0, (??m_uiMessageLength + 2)
        CP      R23, R0
        BREQ    ??Reply_1
        TST     R23
        BREQ    ??Reply_1
//  154     uint16_t uiLength = uiFrameLength;
//  155 
//  156     /* Filter on the Modbus unit identifier (slave) in RTU mode */
//  157     if (uiSlave != m_uiOwnAddress && uiSlave != MODBUS_BROADCAST_ADDRESS)
//  158     {
//  159         return 0;
        LDI     R16, 0
        LDI     R17, 0
        RET
//  160     }
//  161 
//  162     switch (uiFunctionCode)
??Reply_1:
        CPI     R22, 2
        BRNE    ??Reply_2
//  163     {
//  164     case _FC_READ_DISCRETE_INPUTS:
//  165         uiLength = ReadDiscreteInputs(puiRequest, puiResponse, uiLength);
        RCALL   ??ReadDiscreteInputs
//  166         break;
        RJMP    ??Reply_3
//  167 
//  168     default:
//  169         uiLength = ResponseException(uiSlave,
//  170                                      uiFunctionCode,
//  171                                      MODBUS_EXCEPTION_ILLEGAL_FUNCTION,
//  172                                      puiResponse);
??Reply_2:
        MOVW    R21:R20, R19:R18
        LDI     R18, 1
        MOV     R17, R22
        MOV     R16, R23
        RCALL   ??ResponseException
//  173         break;
//  174     }
//  175 
//  176     m_uiMessageLength = uiLength;
??Reply_3:
        LDI     R30, LOW(??m_uiMessageLength)
        LDI     R31, (??m_uiMessageLength) >> 8
        ST      Z, R16
        STD     Z+1, R17
//  177     return uiLength;
        RET
//  178 }

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        RSEG NEAR_F:CODE:ROOT(0)
        DC8 0, 0

        END
//  179 
//  180 //-----------------------------------------------------------------------------------------------------
//  181 
//  182 
//  183 
//  184 
//  185 
//  186 
// 
//  87 bytes in segment ABSOLUTE
// 352 bytes in segment CODE
//   6 bytes in segment INITTAB
//   2 bytes in segment NEAR_F
//  18 bytes in segment NEAR_Z
// 
// 354 bytes of CODE memory (+  6 bytes shared)
//  18 bytes of DATA memory (+ 87 bytes shared)
//
//Errors: none
//Warnings: 3
