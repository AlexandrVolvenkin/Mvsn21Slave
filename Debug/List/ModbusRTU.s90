///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.10.6.1378 for Atmel AVR          08/May/2022  01:27:23
// Copyright 1996-2018 IAR Systems AB.
//
//    Source file  =  
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Modbus\ModbusRTU.cpp
//    Command line =  
//        -f C:\Users\ghost\AppData\Local\Temp\EW4C5F.tmp
//        (--string_literals_in_flash
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Modbus\ModbusRTU.cpp
//        --cpu=m48 -ms -o
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Debug\Obj -lB
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Debug\List
//        --initializers_in_flash --root_variables --no_cse --no_inline
//        --no_code_motion --no_cross_call --no_clustering --no_tbaa --debug
//        -DENABLE_BIT_DEFINITIONS -e -I
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\include\ -I
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Modbus\ --eeprom_size
//        256 --dlib --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
//        Workbench 8.0\avr\LIB\DLIB\dlAVR-1s-ec_mul-n.h" -On --eec++)
//    Locale       =  Russian_RUS.1251
//    List file    =  
//        D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Debug\List\ModbusRTU.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME ModbusRTU

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?EPILOGUE_B16_L09
        EXTERN ?EPILOGUE_B2_L09
        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?EPILOGUE_B8_L09
        EXTERN ?PROLOGUE16_L09
        EXTERN ?PROLOGUE2_L09
        EXTERN ?PROLOGUE4_L09
        EXTERN ?PROLOGUE8_L09
        EXTERN ?Register_R10_is_cg_reg
        EXTERN ?Register_R11_is_cg_reg
        EXTERN ?Register_R12_is_cg_reg
        EXTERN ?Register_R13_is_cg_reg
        EXTERN ?Register_R14_is_cg_reg
        EXTERN ?Register_R15_is_cg_reg
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?Register_R6_is_cg_reg
        EXTERN ?Register_R7_is_cg_reg
        EXTERN ?Register_R8_is_cg_reg
        EXTERN ?Register_R9_is_cg_reg
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK ??ByteIsReceived
        PUBLIC ??ConfirmationReceiveTimeIsOver
        PUBLIC ??Execution
        PUBLIC ??FrameCheck
        PUBLIC ??FrameIsReceived
        PUBWEAK ??FrameIsSended
        PUBWEAK ??GetFrameLength
        PUBLIC ??GetFrameLength_1
        PUBWEAK ??GetSystemTick
        PUBLIC ??GetSystemTime
        PUBLIC ??Init
        PUBLIC ??MessageIsSended
        PUBLIC ??Receive
        PUBLIC ??ReceiveDisable
        PUBLIC ??ReceiveEnable
        PUBLIC ??ReceiveTimeIsOver
        PUBLIC ??Reset
        PUBLIC ??ResponseBasis
        PUBLIC ??Select
        PUBLIC ??Send
        PUBLIC ??Tail
        PUBLIC ??TransmitDelayTimeIsOver
        PUBLIC ??m_cParity
        PUBLIC ??m_pxDevice
        PUBLIC ??m_uiBaudRate
        PUBLIC ??m_uiDataBit
        PUBLIC ??m_uiStopBit
        PUBWEAK _A_ACSR
        PUBWEAK _A_ADC
        PUBWEAK _A_ADCSRA
        PUBWEAK _A_ADCSRB
        PUBWEAK _A_ADMUX
        PUBWEAK _A_ASSR
        PUBWEAK _A_CLKPR
        PUBWEAK _A_DDRB
        PUBWEAK _A_DDRC
        PUBWEAK _A_DDRD
        PUBWEAK _A_DIDR0
        PUBWEAK _A_DIDR1
        PUBWEAK _A_EEAR
        PUBWEAK _A_EECR
        PUBWEAK _A_EEDR
        PUBWEAK _A_EICRA
        PUBWEAK _A_EIFR
        PUBWEAK _A_EIMSK
        PUBWEAK _A_GPIOR0
        PUBWEAK _A_GPIOR1
        PUBWEAK _A_GPIOR2
        PUBWEAK _A_GTCCR
        PUBWEAK _A_ICR1
        PUBWEAK _A_MCUCR
        PUBWEAK _A_MCUSR
        PUBWEAK _A_OCR0A
        PUBWEAK _A_OCR0B
        PUBWEAK _A_OCR1A
        PUBWEAK _A_OCR1B
        PUBWEAK _A_OCR2A
        PUBWEAK _A_OCR2B
        PUBWEAK _A_OSCCAL
        PUBWEAK _A_PCICR
        PUBWEAK _A_PCIFR
        PUBWEAK _A_PCMSK0
        PUBWEAK _A_PCMSK1
        PUBWEAK _A_PCMSK2
        PUBWEAK _A_PINB
        PUBWEAK _A_PINC
        PUBWEAK _A_PIND
        PUBWEAK _A_PORTB
        PUBWEAK _A_PORTC
        PUBWEAK _A_PORTD
        PUBWEAK _A_PRR
        PUBWEAK _A_SMCR
        PUBWEAK _A_SP
        PUBWEAK _A_SPCR
        PUBWEAK _A_SPDR
        PUBWEAK _A_SPMCSR
        PUBWEAK _A_SPSR
        PUBWEAK _A_SREG
        PUBWEAK _A_TCCR0A
        PUBWEAK _A_TCCR0B
        PUBWEAK _A_TCCR1A
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TCCR1C
        PUBWEAK _A_TCCR2A
        PUBWEAK _A_TCCR2B
        PUBWEAK _A_TCNT0
        PUBWEAK _A_TCNT1
        PUBWEAK _A_TCNT2
        PUBWEAK _A_TIFR0
        PUBWEAK _A_TIFR1
        PUBWEAK _A_TIFR2
        PUBWEAK _A_TIMSK0
        PUBWEAK _A_TIMSK1
        PUBWEAK _A_TIMSK2
        PUBWEAK _A_TWAMR
        PUBWEAK _A_TWAR
        PUBWEAK _A_TWBR
        PUBWEAK _A_TWCR
        PUBWEAK _A_TWDR
        PUBWEAK _A_TWSR
        PUBWEAK _A_UBRR0
        PUBWEAK _A_UCSR0A
        PUBWEAK _A_UCSR0B
        PUBWEAK _A_UCSR0C
        PUBWEAK _A_UDR0
        PUBWEAK _A_WDTCSR
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR

`?<Name CUart 0>`   SYMBOL "CUart"
`?<Name CModbus 13>` SYMBOL "CModbus"
??m_bfByteIsReceived SYMBOL "m_bfByteIsReceived", `?<Name CUart 0>`
??m_bfFrameIsSended SYMBOL "m_bfFrameIsSended", `?<Name CUart 0>`
??m_nuiRxBuffByteCounter SYMBOL "m_nuiRxBuffByteCounter", `?<Name CUart 0>`
??m_pui16HoldingRegisters SYMBOL "m_pui16HoldingRegisters", `?<Name CModbus 13>`
??m_pui16InputRegisters SYMBOL "m_pui16InputRegisters", `?<Name CModbus 13>`
??m_puiCoils        SYMBOL "m_puiCoils", `?<Name CModbus 13>`
??m_puiDiscreteInputs SYMBOL "m_puiDiscreteInputs", `?<Name CModbus 13>`
??m_puiRxBuffer     SYMBOL "m_puiRxBuffer", `?<Name CModbus 13>`
??m_puiTxBuffer     SYMBOL "m_puiTxBuffer", `?<Name CModbus 13>`
??m_uiCoilsNumber   SYMBOL "m_uiCoilsNumber", `?<Name CModbus 13>`
??m_uiDiscreteInputsNumber SYMBOL "m_uiDiscreteInputsNumber", `?<Name CModbus 13>`
??m_uiFlowControl   SYMBOL "m_uiFlowControl", `?<Name CModbus 13>`
??m_uiHoldingRegistersNumber SYMBOL "m_uiHoldingRegistersNumber", `?<Name CModbus 13>`
??m_uiInputRegistersNumber SYMBOL "m_uiInputRegistersNumber", `?<Name CModbus 13>`
??m_uiLastSystemTime SYMBOL "m_uiLastSystemTime", `?<Name CModbus 13>`
??m_uiMessageLength SYMBOL "m_uiMessageLength", `?<Name CModbus 13>`
`?<Name CPlatform 38>` SYMBOL "CPlatform"
??m_uiSystemTick    SYMBOL "m_uiSystemTick", `?<Name CPlatform 38>`
`?<Name CModbusRTU 44>` SYMBOL "CModbusRTU"
??m_cParity         SYMBOL "m_cParity", `?<Name CModbusRTU 44>`
??m_pxDevice        SYMBOL "m_pxDevice", `?<Name CModbusRTU 44>`
??m_uiBaudRate      SYMBOL "m_uiBaudRate", `?<Name CModbusRTU 44>`
??m_uiDataBit       SYMBOL "m_uiDataBit", `?<Name CModbusRTU 44>`
??m_uiStopBit       SYMBOL "m_uiStopBit", `?<Name CModbusRTU 44>`

        EXTERN ??Disable
        EXTERN ??Enable
        EXTERN ??Init_1
        EXTERN ??Read
        EXTERN ??Reply
        EXTERN ??Reset_1
        EXTERN ??SendMessage
        EXTERN ??Write
        EXTERN ??m_bfByteIsReceived
        EXTERN ??m_bfFrameIsSended
        EXTERN ??m_nuiRxBuffByteCounter
        EXTERN ??m_pui16HoldingRegisters
        EXTERN ??m_pui16InputRegisters
        EXTERN ??m_puiCoils
        EXTERN ??m_puiDiscreteInputs
        EXTERN ??m_puiRxBuffer
        EXTERN ??m_puiTxBuffer
        EXTERN ??m_uiCoilsNumber
        EXTERN ??m_uiDiscreteInputsNumber
        EXTERN ??m_uiFlowControl
        EXTERN ??m_uiHoldingRegistersNumber
        EXTERN ??m_uiInputRegistersNumber
        EXTERN ??m_uiLastSystemTime
        EXTERN ??m_uiMessageLength
        EXTERN ??m_uiSystemTick
        EXTERN ??usCrc16

// D:\Projects\CautoProjects\Mvsn21\Mvsn21Slave\Modbus\ModbusRTU.cpp
//    1 //-----------------------------------------------------------------------------------------------------
//    2 //  Sourse      : FileName.cpp
//    3 //  Created     : 01.06.2022
//    4 //  Author      : Alexandr Volvenkin
//    5 //  email       : aav-36@mail.ru
//    6 //  GitHub      : https://github.com/AlexandrVolvenkin
//    7 //-----------------------------------------------------------------------------------------------------
//    8 #include "ModbusRTU.h"

        ASEGN ABSOLUTE:DATA:ROOT,0c6H
// union <unnamed> volatile __io _A_UDR0
_A_UDR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0c4H
// union <unnamed> volatile __io _A_UBRR0
_A_UBRR0:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,0c2H
// union <unnamed> volatile __io _A_UCSR0C
_A_UCSR0C:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0c1H
// union <unnamed> volatile __io _A_UCSR0B
_A_UCSR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0c0H
// union <unnamed> volatile __io _A_UCSR0A
_A_UCSR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0bdH
// union <unnamed> volatile __io _A_TWAMR
_A_TWAMR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0bcH
// union <unnamed> volatile __io _A_TWCR
_A_TWCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0bbH
// union <unnamed> volatile __io _A_TWDR
_A_TWDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0baH
// union <unnamed> volatile __io _A_TWAR
_A_TWAR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b9H
// union <unnamed> volatile __io _A_TWSR
_A_TWSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b8H
// union <unnamed> volatile __io _A_TWBR
_A_TWBR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b6H
// union <unnamed> volatile __io _A_ASSR
_A_ASSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b4H
// union <unnamed> volatile __io _A_OCR2B
_A_OCR2B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b3H
// union <unnamed> volatile __io _A_OCR2A
_A_OCR2A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b2H
// union <unnamed> volatile __io _A_TCNT2
_A_TCNT2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b1H
// union <unnamed> volatile __io _A_TCCR2B
_A_TCCR2B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,0b0H
// union <unnamed> volatile __io _A_TCCR2A
_A_TCCR2A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,08aH
// union <unnamed> volatile __io _A_OCR1B
_A_OCR1B:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,088H
// union <unnamed> volatile __io _A_OCR1A
_A_OCR1A:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,086H
// union <unnamed> volatile __io _A_ICR1
_A_ICR1:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,084H
// union <unnamed> volatile __io _A_TCNT1
_A_TCNT1:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,082H
// union <unnamed> volatile __io _A_TCCR1C
_A_TCCR1C:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,081H
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,080H
// union <unnamed> volatile __io _A_TCCR1A
_A_TCCR1A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07fH
// union <unnamed> volatile __io _A_DIDR1
_A_DIDR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07eH
// union <unnamed> volatile __io _A_DIDR0
_A_DIDR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07cH
// union <unnamed> volatile __io _A_ADMUX
_A_ADMUX:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07bH
// union <unnamed> volatile __io _A_ADCSRB
_A_ADCSRB:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,07aH
// union <unnamed> volatile __io _A_ADCSRA
_A_ADCSRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,078H
// union <unnamed> volatile __io _A_ADC
_A_ADC:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,070H
// union <unnamed> volatile __io _A_TIMSK2
_A_TIMSK2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06fH
// union <unnamed> volatile __io _A_TIMSK1
_A_TIMSK1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06eH
// union <unnamed> volatile __io _A_TIMSK0
_A_TIMSK0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06dH
// union <unnamed> volatile __io _A_PCMSK2
_A_PCMSK2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06cH
// union <unnamed> volatile __io _A_PCMSK1
_A_PCMSK1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,06bH
// union <unnamed> volatile __io _A_PCMSK0
_A_PCMSK0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,069H
// union <unnamed> volatile __io _A_EICRA
_A_EICRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,068H
// union <unnamed> volatile __io _A_PCICR
_A_PCICR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,066H
// union <unnamed> volatile __io _A_OSCCAL
_A_OSCCAL:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,064H
// union <unnamed> volatile __io _A_PRR
_A_PRR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,061H
// union <unnamed> volatile __io _A_CLKPR
_A_CLKPR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,060H
// union <unnamed> volatile __io _A_WDTCSR
_A_WDTCSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,05fH
// union <unnamed> volatile __io _A_SREG
_A_SREG:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,05dH
// union <unnamed> volatile __io _A_SP
_A_SP:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,057H
// union <unnamed> volatile __io _A_SPMCSR
_A_SPMCSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,055H
// union <unnamed> volatile __io _A_MCUCR
_A_MCUCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,054H
// union <unnamed> volatile __io _A_MCUSR
_A_MCUSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,053H
// union <unnamed> volatile __io _A_SMCR
_A_SMCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,050H
// union <unnamed> volatile __io _A_ACSR
_A_ACSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04eH
// union <unnamed> volatile __io _A_SPDR
_A_SPDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04dH
// union <unnamed> volatile __io _A_SPSR
_A_SPSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04cH
// union <unnamed> volatile __io _A_SPCR
_A_SPCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04bH
// union <unnamed> volatile __io _A_GPIOR2
_A_GPIOR2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,04aH
// union <unnamed> volatile __io _A_GPIOR1
_A_GPIOR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,048H
// union <unnamed> volatile __io _A_OCR0B
_A_OCR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,047H
// union <unnamed> volatile __io _A_OCR0A
_A_OCR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,046H
// union <unnamed> volatile __io _A_TCNT0
_A_TCNT0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,045H
// union <unnamed> volatile __io _A_TCCR0B
_A_TCCR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,044H
// union <unnamed> volatile __io _A_TCCR0A
_A_TCCR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,043H
// union <unnamed> volatile __io _A_GTCCR
_A_GTCCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,041H
// union <unnamed> volatile __io _A_EEAR
_A_EEAR:
        DS8 2

        ASEGN ABSOLUTE:DATA:ROOT,040H
// union <unnamed> volatile __io _A_EEDR
_A_EEDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03fH
// union <unnamed> volatile __io _A_EECR
_A_EECR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03eH
// union <unnamed> volatile __io _A_GPIOR0
_A_GPIOR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03dH
// union <unnamed> volatile __io _A_EIMSK
_A_EIMSK:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03cH
// union <unnamed> volatile __io _A_EIFR
_A_EIFR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,03bH
// union <unnamed> volatile __io _A_PCIFR
_A_PCIFR:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,037H
// union <unnamed> volatile __io _A_TIFR2
_A_TIFR2:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,036H
// union <unnamed> volatile __io _A_TIFR1
_A_TIFR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,035H
// union <unnamed> volatile __io _A_TIFR0
_A_TIFR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,02bH
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,02aH
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,029H
// union <unnamed> volatile __io _A_PIND
_A_PIND:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,028H
// union <unnamed> volatile __io _A_PORTC
_A_PORTC:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,027H
// union <unnamed> volatile __io _A_DDRC
_A_DDRC:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,026H
// union <unnamed> volatile __io _A_PINC
_A_PINC:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,025H
// union <unnamed> volatile __io _A_PORTB
_A_PORTB:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,024H
// union <unnamed> volatile __io _A_DDRB
_A_DDRB:
        DS8 1

        ASEGN ABSOLUTE:DATA:ROOT,023H
// union <unnamed> volatile __io _A_PINB
_A_PINB:
        DS8 1

        RSEG CODE:CODE:NOROOT(1)
// __version_3 uint8_t CUart::ByteIsReceived()
??ByteIsReceived:
        LDS     R16, ??m_bfByteIsReceived
        RET

        RSEG CODE:CODE:NOROOT(1)
// __version_3 uint8_t CUart::FrameIsSended()
??FrameIsSended:
        LDS     R16, ??m_bfFrameIsSended
        RET

        RSEG CODE:CODE:NOROOT(1)
// __version_3 uint16_t CUart::GetFrameLength()
??GetFrameLength:
        LDI     R30, LOW(??m_nuiRxBuffByteCounter)
        LDI     R31, (??m_nuiRxBuffByteCounter) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        RET

        RSEG CODE:CODE:NOROOT(1)
// __version_3 uint16_t CPlatform::GetSystemTick()
??GetSystemTick:
        LDI     R30, LOW(??m_uiSystemTick)
        LDI     R31, (??m_uiSystemTick) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        RET
//    9 #include "Crc.h"
//   10 
//   11 

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   12 CUart* CModbusRTU::m_pxDevice;
??m_pxDevice:
        DS8 2
//   13 /* Bauds: 9600, 19200, 57600, 115200, etc */

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   14 uint32_t CModbusRTU::m_uiBaudRate;
??m_uiBaudRate:
        DS8 4
//   15 /* Data bit */

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   16 uint8_t CModbusRTU::m_uiDataBit;
??m_uiDataBit:
        DS8 1
//   17 /* Stop bit */

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   18 uint8_t CModbusRTU::m_uiStopBit;
??m_uiStopBit:
        DS8 1
//   19 /* Parity: 'N', 'O', 'E' */

        RSEG NEAR_Z:DATA:ROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   20 char CModbusRTU::m_cParity;
??m_cParity:
        DS8 1
//   21 
//   22 ////-----------------------------------------------------------------------------------------------------
//   23 //CModbusRTU::CModbusRTU()
//   24 //{
//   25 //
//   26 //}
//   27 //
//   28 //////-----------------------------------------------------------------------------------------------------
//   29 ////CModbusRTU::CModbusRTU(CUart* pxDevice,
//   30 ////                       uint32_t uiBaudRate,
//   31 ////                       char cParity,
//   32 ////                       uint8_t uiDataBit,
//   33 ////                       uint8_t uiStopBit,
//   34 ////                       uint8_t *puiRxBuffer,
//   35 ////                       uint8_t *puiTxBuffer) :
//   36 ////    pxDevice(pxDevice),
//   37 ////    uiBaudRate(uiBaudRate),
//   38 ////    cParity(cParity),
//   39 ////    uiDataBit(uiDataBit),
//   40 ////    uiStopBit(uiStopBit),
//   41 ////    m_puiRxBuffer(puiRxBuffer),
//   42 ////    m_puiTxBuffer(puiTxBuffer)
//   43 ////{
//   44 ////    m_uiFlowControl = MODBUS_IDDLE;
//   45 ////}
//   46 //
//   47 //
//   48 ////-----------------------------------------------------------------------------------------------------
//   49 //CModbusRTU::~CModbusRTU()
//   50 //{
//   51 //
//   52 //}
//   53 
//   54 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//   55 void CModbusRTU::Init(CUart* pxDevice,
??Init:
//   56                       uint32_t uiBaudRate,
//   57                       char cParity,
//   58                       uint8_t uiDataBit,
//   59                       uint8_t uiStopBit,
//   60                       uint8_t *puiRxBuffer,
//   61                       uint8_t *puiTxBuffer,
//   62                       uint8_t *puiCoils,
//   63                       uint8_t *puiDiscreteInputs,
//   64                       uint16_t *pui16HoldingRegisters,
//   65                       uint16_t *pui16InputRegisters,
//   66                       uint16_t uiCoilsNumber,
//   67                       uint16_t uiDiscreteInputsNumber,
//   68                       uint16_t uiInputRegistersNumber,
//   69                       uint16_t uiHoldingRegistersNumber)
//   70 {
        RCALL   ?PROLOGUE16_L09
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        REQUIRE ?Register_R9_is_cg_reg
        REQUIRE ?Register_R10_is_cg_reg
        REQUIRE ?Register_R11_is_cg_reg
        REQUIRE ?Register_R12_is_cg_reg
        REQUIRE ?Register_R13_is_cg_reg
        REQUIRE ?Register_R14_is_cg_reg
        REQUIRE ?Register_R15_is_cg_reg
        SBIW    R29:R28, 4
        STD     Y+2, R16
        STD     Y+3, R17
        STD     Y+1, R18
        ST      Y, R19
        MOVW    R25:R24, R21:R20
        MOVW    R27:R26, R23:R22
        LDD     R6, Y+21
        LDD     R7, Y+22
        LDD     R4, Y+23
        LDD     R5, Y+24
        LDD     R14, Y+29
        LDD     R15, Y+30
        LDD     R12, Y+31
        LDD     R13, Y+32
        LDD     R10, Y+33
        LDD     R11, Y+34
        LDD     R8, Y+35
        LDD     R9, Y+36
//   71     m_pxDevice = pxDevice;
        LDD     R16, Y+2
        LDD     R17, Y+3
        LDI     R30, LOW(??m_pxDevice)
        LDI     R31, (??m_pxDevice) >> 8
        ST      Z, R16
        STD     Z+1, R17
//   72     m_uiBaudRate = uiBaudRate;
        LDI     R30, LOW(??m_uiBaudRate)
        LDI     R31, (??m_uiBaudRate) >> 8
        ST      Z, R24
        STD     Z+1, R25
        STD     Z+2, R26
        STD     Z+3, R27
//   73     m_cParity = cParity;
        LDD     R16, Y+1
        STS     ??m_cParity, R16
//   74     m_uiDataBit = uiDataBit;
        LD      R16, Y
        STS     ??m_uiDataBit, R16
//   75     m_uiStopBit = uiStopBit;
        LDD     R16, Y+20
        STS     ??m_uiStopBit, R16
//   76     m_puiRxBuffer = puiRxBuffer;
        LDI     R30, LOW(??m_puiRxBuffer)
        LDI     R31, (??m_puiRxBuffer) >> 8
        ST      Z, R6
        STD     Z+1, R7
//   77     m_puiTxBuffer = puiTxBuffer;
        LDI     R30, LOW(??m_puiTxBuffer)
        LDI     R31, (??m_puiTxBuffer) >> 8
        ST      Z, R4
        STD     Z+1, R5
//   78     m_puiCoils = puiCoils;
        LDD     R16, Y+25
        LDD     R17, Y+26
        LDI     R30, LOW(??m_puiCoils)
        LDI     R31, (??m_puiCoils) >> 8
        ST      Z, R16
        STD     Z+1, R17
//   79     m_puiDiscreteInputs = puiDiscreteInputs;
        LDD     R16, Y+27
        LDD     R17, Y+28
        LDI     R30, LOW(??m_puiDiscreteInputs)
        LDI     R31, (??m_puiDiscreteInputs) >> 8
        ST      Z, R16
        STD     Z+1, R17
//   80     m_pui16HoldingRegisters = pui16HoldingRegisters;
        LDI     R30, LOW(??m_pui16HoldingRegisters)
        LDI     R31, (??m_pui16HoldingRegisters) >> 8
        ST      Z, R14
        STD     Z+1, R15
//   81     m_pui16InputRegisters = pui16InputRegisters;
        LDI     R30, LOW(??m_pui16InputRegisters)
        LDI     R31, (??m_pui16InputRegisters) >> 8
        ST      Z, R12
        STD     Z+1, R13
//   82     m_uiCoilsNumber = uiCoilsNumber;
        LDI     R30, LOW(??m_uiCoilsNumber)
        LDI     R31, (??m_uiCoilsNumber) >> 8
        ST      Z, R10
        STD     Z+1, R11
//   83     m_uiDiscreteInputsNumber = uiDiscreteInputsNumber;
        LDI     R30, LOW(??m_uiDiscreteInputsNumber)
        LDI     R31, (??m_uiDiscreteInputsNumber) >> 8
        ST      Z, R8
        STD     Z+1, R9
//   84     m_uiInputRegistersNumber = uiInputRegistersNumber;
        LDD     R16, Y+37
        LDD     R17, Y+38
        LDI     R30, LOW(??m_uiInputRegistersNumber)
        LDI     R31, (??m_uiInputRegistersNumber) >> 8
        ST      Z, R16
        STD     Z+1, R17
//   85     m_uiHoldingRegistersNumber = uiHoldingRegistersNumber;
        LDD     R16, Y+39
        LDD     R17, Y+40
        LDI     R30, LOW(??m_uiHoldingRegistersNumber)
        LDI     R31, (??m_uiHoldingRegistersNumber) >> 8
        ST      Z, R16
        STD     Z+1, R17
//   86 
//   87     CUart::Init(m_uiBaudRate,
//   88                 m_cParity,
//   89                 m_uiDataBit,
//   90                 m_uiStopBit,
//   91                 puiRxBuffer,
//   92                 puiTxBuffer);
        ST      -Y, R5
        ST      -Y, R4
        ST      -Y, R7
        ST      -Y, R6
        LDS     R22, ??m_uiStopBit
        LDS     R21, ??m_uiDataBit
        LDS     R20, ??m_cParity
        LDI     R30, LOW(??m_uiBaudRate)
        LDI     R31, (??m_uiBaudRate) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        RCALL   ??Init_1
//   93 }
        ADIW    R29:R28, 4
        LDI     R30, 37
        RJMP    ?EPILOGUE_B16_L09
//   94 
//   95 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//   96 void CModbusRTU::Reset(void)
??Reset:
//   97 {
//   98     CUart::Reset();
        RCALL   ??Reset_1
//   99 }
        RET
//  100 
//  101 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  102 int8_t CModbusRTU::ReceiveEnable(void)
??ReceiveEnable:
//  103 {
//  104     CUart::Enable();
        RCALL   ??Enable
//  105 }
        RET
//  106 
//  107 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  108 int8_t CModbusRTU::ReceiveDisable(void)
??ReceiveDisable:
//  109 {
//  110     CUart::Disable();
        RCALL   ??Disable
//  111 }
        RET
//  112 
//  113 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  114 int16_t CModbusRTU::Tail(uint8_t *puiMessage, uint16_t uiLength)
??Tail:
//  115 {
        RCALL   ?PROLOGUE4_L09
        MOVW    R27:R26, R17:R16
        MOVW    R25:R24, R19:R18
//  116     uint16_t uiCrc = usCrc16(puiMessage, uiLength);
        MOVW    R19:R18, R25:R24
        MOVW    R17:R16, R27:R26
        RCALL   ??usCrc16
        MOVW    R19:R18, R17:R16
//  117     puiMessage[uiLength++] = uiCrc & 0x00FF;
        MOV     R16, R18
        MOVW    R31:R30, R27:R26
        ADD     R30, R24
        ADC     R31, R25
        ST      Z, R16
        ADIW    R25:R24, 1
//  118     puiMessage[uiLength++] = uiCrc >> 8;
        MOVW    R17:R16, R19:R18
        MOV     R16, R17
        LDI     R17, 0
        MOVW    R31:R30, R27:R26
        ADD     R30, R24
        ADC     R31, R25
        ST      Z, R16
        ADIW    R25:R24, 1
//  119 
//  120     return uiLength;
        MOVW    R17:R16, R25:R24
        LDI     R30, 4
        RJMP    ?EPILOGUE_B4_L09
//  121 }
//  122 
//  123 ///* Builds a RTU request header */
//  124 //int16_t CModbusRTU::RequestBasis(uint8_t uiSlave,
//  125 //                                 uint8_t uiFunctionCode,
//  126 //                                 uint16_t uiAddress,
//  127 //                                 uint16_t uiBitNumber,
//  128 //                                 uint8_t *puiRequest)
//  129 //{
//  130 //    puiRequest[0] = uiSlave;
//  131 //    puiRequest[1] = uiFunctionCode;
//  132 //    puiRequest[2] = (static_cast<uint8_t>(uiAddress >> 8));
//  133 //    puiRequest[3] = (static_cast<uint8_t>(uiAddress & 0x00ff));
//  134 //    puiRequest[4] = (static_cast<uint8_t>(uiBitNumber >> 8));
//  135 //    puiRequest[5] = (static_cast<uint8_t>(uiBitNumber & 0x00ff));
//  136 //
//  137 //    return _MODBUS_RTU_PRESET_REQ_LENGTH;
//  138 //}
//  139 
//  140 /* Builds a RTU response header */

        RSEG CODE:CODE:NOROOT(1)
//  141 int16_t CModbusRTU::ResponseBasis(uint8_t uiSlave, uint8_t uiFunctionCode, uint8_t *puiResponse)
??ResponseBasis:
//  142 {
        MOV     R20, R16
        MOV     R21, R17
//  143     /* In this case, the slave is certainly valid because a check is already
//  144      * done in _modbus_rtu_listen */
//  145     puiResponse[0] = uiSlave;
        MOVW    R31:R30, R19:R18
        ST      Z, R20
//  146     puiResponse[1] = uiFunctionCode;
        MOVW    R31:R30, R19:R18
        STD     Z+1, R21
//  147 
//  148     return _MODBUS_RTU_PRESET_RSP_LENGTH;
        LDI     R16, 2
        LDI     R17, 0
        RET
//  149 }
//  150 
//  151 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  152 int16_t CModbusRTU::Send(uint8_t *puiMessage, uint16_t uiLength)
??Send:
//  153 {
        RCALL   ?PROLOGUE4_L09
        MOVW    R27:R26, R17:R16
        MOVW    R25:R24, R19:R18
//  154     return CUart::Write(puiMessage, uiLength);
        MOVW    R19:R18, R25:R24
        MOVW    R17:R16, R27:R26
        RCALL   ??Write
        LDI     R30, 4
        RJMP    ?EPILOGUE_B4_L09
//  155 }
//  156 
//  157 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  158 uint8_t CModbusRTU::MessageIsSended(void)
??MessageIsSended:
//  159 {
//  160     return CUart::FrameIsSended();
        RCALL   ??FrameIsSended
        RET
//  161 }
//  162 
//  163 ////-----------------------------------------------------------------------------------------------------
//  164 //int16_t CModbusRTU::Receive(void)
//  165 //{
//  166 //    return CUart::Read();
//  167 //}
//  168 
//  169 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  170 uint8_t CModbusRTU::Select(void)
??Select:
//  171 {
//  172     return CUart::ByteIsReceived();
        RCALL   ??ByteIsReceived
        RET
//  173 }
//  174 
//  175 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  176 int16_t CModbusRTU::Receive(uint8_t *puiDestination, uint16_t uiLength)
??Receive:
//  177 {
        RCALL   ?PROLOGUE4_L09
        MOVW    R27:R26, R17:R16
        MOVW    R25:R24, R19:R18
//  178     return CUart::Read(puiDestination, uiLength);
        MOVW    R19:R18, R25:R24
        MOVW    R17:R16, R27:R26
        RCALL   ??Read
        LDI     R30, 4
        RJMP    ?EPILOGUE_B4_L09
//  179 }
//  180 
//  181 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  182 uint8_t CModbusRTU::FrameIsReceived(void)
??FrameIsReceived:
//  183 {
        RCALL   ?PROLOGUE2_L09
//  184     int16_t uiData;
//  185     uiData = CPlatform::GetSystemTick();
        RCALL   ??GetSystemTick
        MOVW    R25:R24, R17:R16
//  186     uiData = m_uiLastSystemTime;
        LDI     R30, LOW(??m_uiLastSystemTime)
        LDI     R31, (??m_uiLastSystemTime) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        MOVW    R25:R24, R17:R16
//  187     uiData = m_uiGuardTimeout;
        LDI     R24, 4
        LDI     R25, 0
//  188 
//  189     if ((CPlatform::GetSystemTick() - m_uiLastSystemTime)  >=
//  190             m_uiGuardTimeout)
        RCALL   ??GetSystemTick
        LDI     R30, LOW(??m_uiLastSystemTime)
        LDI     R31, (??m_uiLastSystemTime) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        SUB     R16, R18
        SBC     R17, R19
        CPI     R16, 4
        SBCI    R17, 0
        BRCS    ??FrameIsReceived_1
//  191     {
//  192         return 1;
        LDI     R16, 1
        RJMP    ??FrameIsReceived_2
//  193     }
//  194     else
//  195     {
//  196         return 0;
??FrameIsReceived_1:
        LDI     R16, 0
??FrameIsReceived_2:
        LDI     R30, 2
        RJMP    ?EPILOGUE_B2_L09
//  197     }
//  198 };
//  199 
//  200 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  201 uint8_t CModbusRTU::ReceiveTimeIsOver(void)
??ReceiveTimeIsOver:
//  202 {
//  203     if ((CPlatform::GetSystemTick() - m_uiLastSystemTime)  >=
//  204             m_uiReceiveTimeout)
        RCALL   ??GetSystemTick
        LDI     R30, LOW(??m_uiLastSystemTime)
        LDI     R31, (??m_uiLastSystemTime) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        SUB     R16, R18
        SBC     R17, R19
        CPI     R16, 152
        LDI     R18, 0
        CPC     R17, R18
        BRCS    ??ReceiveTimeIsOver_1
//  205     {
//  206         return 1;
        LDI     R16, 1
        RET
//  207     }
//  208     else
//  209     {
//  210         return 0;
??ReceiveTimeIsOver_1:
        LDI     R16, 0
        RET
//  211     }
//  212 };
//  213 
//  214 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  215 uint8_t CModbusRTU::ConfirmationReceiveTimeIsOver(void)
??ConfirmationReceiveTimeIsOver:
//  216 {
//  217     if ((CPlatform::GetSystemTick() - m_uiLastSystemTime)  >=
//  218             m_uiConfirmationTimeout)
        RCALL   ??GetSystemTick
        LDI     R30, LOW(??m_uiLastSystemTime)
        LDI     R31, (??m_uiLastSystemTime) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        SUB     R16, R18
        SBC     R17, R19
        CPI     R16, 244
        LDI     R18, 0
        CPC     R17, R18
        BRCS    ??ConfirmationReceiveTimeIsOver_1
//  219     {
//  220         return 1;
        LDI     R16, 1
        RET
//  221     }
//  222     else
//  223     {
//  224         return 0;
??ConfirmationReceiveTimeIsOver_1:
        LDI     R16, 0
        RET
//  225     }
//  226 };
//  227 
//  228 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  229 uint8_t CModbusRTU::TransmitDelayTimeIsOver(void)
??TransmitDelayTimeIsOver:
//  230 {
//  231     if ((CPlatform::GetSystemTick() - m_uiLastSystemTime)  >=
//  232             m_uiTransmitDelayTimeout)
        RCALL   ??GetSystemTick
        LDI     R30, LOW(??m_uiLastSystemTime)
        LDI     R31, (??m_uiLastSystemTime) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        SUB     R16, R18
        SBC     R17, R19
        CPI     R16, 5
        SBCI    R17, 0
        BRCS    ??TransmitDelayTimeIsOver_1
//  233     {
//  234         return 1;
        LDI     R16, 1
        RET
//  235     }
//  236     else
//  237     {
//  238         return 0;
??TransmitDelayTimeIsOver_1:
        LDI     R16, 0
        RET
//  239     }
//  240 };
//  241 
//  242 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  243 uint16_t CModbusRTU::GetFrameLength(void)
??GetFrameLength_1:
//  244 {
//  245     return CUart::GetFrameLength();
        RCALL   ??GetFrameLength
        RET
//  246 }
//  247 
//  248 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  249 void CModbusRTU::GetSystemTime(void)
??GetSystemTime:
//  250 {
//  251     m_uiLastSystemTime = CPlatform::GetSystemTick();
        RCALL   ??GetSystemTick
        LDI     R30, LOW(??m_uiLastSystemTime)
        LDI     R31, (??m_uiLastSystemTime) >> 8
        ST      Z, R16
        STD     Z+1, R17
//  252 }
        RET
//  253 
//  254 ////-----------------------------------------------------------------------------------------------------
//  255 //int8_t CModbusRTU::FrameCheck(void)
//  256 //{
//  257 //    if (CUart::m_nuiRxBuffByteCounter < _MIN_MESSAGE_LENGTH)
//  258 //    {
//  259 //        return 0;
//  260 //    }
//  261 //
//  262 //    uint16_t uiCrc = ((static_cast<uint16_t>(m_puiRxBuffer[CUart::m_nuiRxBuffByteCounter - 1]) << 8) |
//  263 //                      (static_cast<uint16_t>(m_puiRxBuffer[CUart::m_nuiRxBuffByteCounter - 2])));
//  264 //
//  265 //    if (usCrc16(m_puiRxBuffer,
//  266 //                (CUart::m_nuiRxBuffByteCounter - _MODBUS_RTU_CHECKSUM_LENGTH)) == uiCrc)
//  267 //    {
//  268 //        return 1;
//  269 //    }
//  270 //    else
//  271 //    {
//  272 //        return 0;
//  273 //    }
//  274 //}
//  275 
//  276 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  277 int8_t CModbusRTU::FrameCheck(uint8_t *puiSourse, uint16_t uiLength)
??FrameCheck:
//  278 {
        RCALL   ?PROLOGUE8_L09
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        MOVW    R27:R26, R17:R16
        MOVW    R25:R24, R19:R18
//  279     if (uiLength < _MIN_MESSAGE_LENGTH)
        CPI     R24, 4
        LDI     R16, 0
        CPC     R25, R16
        BRCC    ??FrameCheck_1
//  280     {
//  281         return 0;
        LDI     R16, 0
        RJMP    ??FrameCheck_2
//  282     }
//  283 
//  284     uint16_t uiCrc = ((static_cast<uint16_t>(puiSourse[uiLength - 1]) << 8) |
//  285                       (static_cast<uint16_t>(puiSourse[uiLength - 2])));
??FrameCheck_1:
        MOVW    R31:R30, R27:R26
        ADD     R30, R24
        ADC     R31, R25
        SBIW    R31:R30, 1
        LD      R5, Z
        CLR     R4
        MOVW    R31:R30, R27:R26
        ADD     R30, R24
        ADC     R31, R25
        SBIW    R31:R30, 2
        LD      R16, Z
        LDI     R17, 0
        OR      R4, R16
        OR      R5, R17
//  286     uint16_t uiCrcTemp = usCrc16(puiSourse,
//  287                                  (uiLength - _MODBUS_RTU_CHECKSUM_LENGTH));
        MOVW    R19:R18, R25:R24
        SUBI    R18, 2
        SBCI    R19, 0
        MOVW    R17:R16, R27:R26
        RCALL   ??usCrc16
        MOVW    R7:R6, R17:R16
//  288     if (usCrc16(puiSourse,
//  289                 (uiLength - _MODBUS_RTU_CHECKSUM_LENGTH)) == uiCrc)
        MOVW    R19:R18, R25:R24
        SUBI    R18, 2
        SBCI    R19, 0
        MOVW    R17:R16, R27:R26
        RCALL   ??usCrc16
        CP      R16, R4
        CPC     R17, R5
        BRNE    ??FrameCheck_3
//  290     {
//  291         return 1;
        LDI     R16, 1
        RJMP    ??FrameCheck_2
//  292     }
//  293     else
//  294     {
//  295         return 0;
??FrameCheck_3:
        LDI     R16, 0
??FrameCheck_2:
        LDI     R30, 8
        RJMP    ?EPILOGUE_B8_L09
//  296     }
//  297 }
//  298 
//  299 //-----------------------------------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(1)
//  300 void CModbusRTU::Execution(void)
??Execution:
//  301 {
        RCALL   ?PROLOGUE2_L09
//  302     int16_t iReceivedCounter;
//  303 
//  304     switch (m_uiFlowControl)
        LDS     R16, ??m_uiFlowControl
        SUBI    R16, 0
        BREQ    ??Execution_1
        SUBI    R16, 2
        BREQ    ??Execution_2
        DEC     R16
        BREQ    ??Execution_3
        DEC     R16
        BRNE    $+2+2
        RJMP    ??Execution_4
        DEC     R16
        BRNE    $+2+2
        RJMP    ??Execution_5
        DEC     R16
        BRNE    $+2+2
        RJMP    ??Execution_6
        DEC     R16
        BRNE    $+2+2
        RJMP    ??Execution_7
        DEC     R16
        BRNE    $+2+2
        RJMP    ??Execution_8
        RJMP    ??Execution_9
//  305     {
//  306     case IDDLE:
//  307         break;
??Execution_1:
        RJMP    ??Execution_9
//  308 
//  309     case START_REQUEST:
//  310         GetSystemTime();
??Execution_2:
        RCALL   ??GetSystemTime
//  311         Reset();
        RCALL   ??Reset
//  312         m_uiMessageLength = 0;
        LDI     R30, LOW(??m_uiMessageLength)
        LDI     R31, (??m_uiMessageLength) >> 8
        LDI     R16, 0
        ST      Z, R16
        LDI     R16, 0
        STD     Z+1, R16
//  313         m_uiFlowControl = WAITING_MESSAGE_REQUEST;
        LDI     R16, 3
        STS     ??m_uiFlowControl, R16
//  314         break;
        RJMP    ??Execution_9
//  315 
//  316     case WAITING_MESSAGE_REQUEST:
//  317         if (Select())
??Execution_3:
        RCALL   ??Select
        TST     R16
        BREQ    ??Execution_10
//  318         {
//  319             iReceivedCounter = Receive(m_puiRxBuffer + m_uiMessageLength, MODBUS_RTU_MAX_ADU_LENGTH - m_uiMessageLength);
        LDI     R18, 32
        LDI     R19, 0
        LDI     R30, LOW(??m_uiMessageLength)
        LDI     R31, (??m_uiMessageLength) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUB     R18, R16
        SBC     R19, R17
        LDI     R30, LOW(??m_uiMessageLength)
        LDI     R31, (??m_uiMessageLength) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDI     R30, LOW(??m_puiRxBuffer)
        LDI     R31, (??m_puiRxBuffer) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        ADD     R16, R20
        ADC     R17, R21
        RCALL   ??Receive
        MOVW    R25:R24, R17:R16
//  320 
//  321             if (iReceivedCounter > 0)
        CPI     R24, 1
        LDI     R16, 0
        CPC     R25, R16
        BRLT    ??Execution_11
//  322             {
//  323                 m_uiMessageLength += iReceivedCounter;
        LDI     R30, LOW(??m_uiMessageLength)
        LDI     R31, (??m_uiMessageLength) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        ADD     R16, R24
        ADC     R17, R25
        ST      Z, R16
        STD     Z+1, R17
//  324                 GetSystemTime();
        RCALL   ??GetSystemTime
//  325                 m_uiFlowControl = RECEIVE_MESSAGE_REQUEST;
        LDI     R16, 4
        STS     ??m_uiFlowControl, R16
        RJMP    ??Execution_10
//  326             }
//  327             else if (iReceivedCounter == -1)
??Execution_11:
        CPI     R24, 255
        LDI     R16, 255
        CPC     R25, R16
        BRNE    ??Execution_10
//  328             {
//  329                 m_uiFlowControl = START_REQUEST;
        LDI     R16, 2
        STS     ??m_uiFlowControl, R16
//  330             }
//  331         }
//  332 
//  333         if (ReceiveTimeIsOver())
??Execution_10:
        RCALL   ??ReceiveTimeIsOver
        TST     R16
        BREQ    ??Execution_12
//  334         {
//  335             m_uiFlowControl = START_REQUEST;
        LDI     R16, 2
        STS     ??m_uiFlowControl, R16
//  336         }
//  337 
//  338         break;
??Execution_12:
        RJMP    ??Execution_9
//  339 
//  340     case RECEIVE_MESSAGE_REQUEST:
//  341         if (Select())
??Execution_4:
        RCALL   ??Select
        TST     R16
        BREQ    ??Execution_13
//  342         {
//  343             iReceivedCounter = Receive(m_puiRxBuffer + m_uiMessageLength, MODBUS_RTU_MAX_ADU_LENGTH - m_uiMessageLength);
        LDI     R18, 32
        LDI     R19, 0
        LDI     R30, LOW(??m_uiMessageLength)
        LDI     R31, (??m_uiMessageLength) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUB     R18, R16
        SBC     R19, R17
        LDI     R30, LOW(??m_uiMessageLength)
        LDI     R31, (??m_uiMessageLength) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDI     R30, LOW(??m_puiRxBuffer)
        LDI     R31, (??m_puiRxBuffer) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        ADD     R16, R20
        ADC     R17, R21
        RCALL   ??Receive
        MOVW    R25:R24, R17:R16
//  344 
//  345             if (iReceivedCounter > 0)
        CPI     R24, 1
        LDI     R16, 0
        CPC     R25, R16
        BRLT    ??Execution_14
//  346             {
//  347                 m_uiMessageLength += iReceivedCounter;
        LDI     R30, LOW(??m_uiMessageLength)
        LDI     R31, (??m_uiMessageLength) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        ADD     R16, R24
        ADC     R17, R25
        ST      Z, R16
        STD     Z+1, R17
//  348                 GetSystemTime();
        RCALL   ??GetSystemTime
        RJMP    ??Execution_13
//  349             }
//  350             else if (iReceivedCounter == -1)
??Execution_14:
        CPI     R24, 255
        LDI     R16, 255
        CPC     R25, R16
        BRNE    ??Execution_13
//  351             {
//  352                 m_uiFlowControl = START_REQUEST;
        LDI     R16, 2
        STS     ??m_uiFlowControl, R16
//  353             }
//  354         }
//  355 
//  356         if (FrameIsReceived())
??Execution_13:
        RCALL   ??FrameIsReceived
        TST     R16
        BREQ    ??Execution_15
//  357         {
//  358             if (FrameCheck(m_puiRxBuffer, m_uiMessageLength))
        LDI     R30, LOW(??m_uiMessageLength)
        LDI     R31, (??m_uiMessageLength) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        LDI     R30, LOW(??m_puiRxBuffer)
        LDI     R31, (??m_puiRxBuffer) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        RCALL   ??FrameCheck
        TST     R16
        BREQ    ??Execution_16
//  359             {
//  360                 m_uiFlowControl = REPLY_REQUEST;
        LDI     R16, 5
        STS     ??m_uiFlowControl, R16
        RJMP    ??Execution_9
//  361             }
//  362             else
//  363             {
//  364                 m_uiFlowControl = START_REQUEST;
??Execution_16:
        LDI     R16, 2
        STS     ??m_uiFlowControl, R16
//  365             }
//  366         }
//  367 
//  368         break;
??Execution_15:
        RJMP    ??Execution_9
//  369 
//  370     case REPLY_REQUEST:
//  371         if (Reply(m_puiRxBuffer, m_puiTxBuffer, m_uiMessageLength))
??Execution_5:
        LDI     R30, LOW(??m_uiMessageLength)
        LDI     R31, (??m_uiMessageLength) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDI     R30, LOW(??m_puiTxBuffer)
        LDI     R31, (??m_puiTxBuffer) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        LDI     R30, LOW(??m_puiRxBuffer)
        LDI     R31, (??m_puiRxBuffer) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        RCALL   ??Reply
        OR      R16, R17
        BREQ    ??Execution_17
//  372         {
//  373 //            CPlatform::TxLedOn();
//  374             m_uiFlowControl = FRAME_TRANSMIT_CONFIRMATION;
        LDI     R16, 6
        STS     ??m_uiFlowControl, R16
        RJMP    ??Execution_9
//  375         }
//  376         else
//  377         {
//  378 //            CPlatform::TxLedOff();
//  379             m_uiFlowControl = START_REQUEST;
??Execution_17:
        LDI     R16, 2
        STS     ??m_uiFlowControl, R16
//  380         }
//  381         break;
        RJMP    ??Execution_9
//  382 
//  383     case FRAME_TRANSMIT_CONFIRMATION:
//  384         Reset();
??Execution_6:
        RCALL   ??Reset
//  385         GetSystemTime();
        RCALL   ??GetSystemTime
//  386         m_uiFlowControl = WAITING_FRAME_TRANSMIT_CONFIRMATION;
        LDI     R16, 7
        STS     ??m_uiFlowControl, R16
//  387         break;
        RJMP    ??Execution_9
//  388 
//  389     case WAITING_FRAME_TRANSMIT_CONFIRMATION:
//  390         if (TransmitDelayTimeIsOver())
??Execution_7:
        RCALL   ??TransmitDelayTimeIsOver
        TST     R16
        BREQ    ??Execution_9
//  391         {
//  392             SendMessage(m_puiTxBuffer, m_uiMessageLength);
        LDI     R30, LOW(??m_uiMessageLength)
        LDI     R31, (??m_uiMessageLength) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        LDI     R30, LOW(??m_puiTxBuffer)
        LDI     R31, (??m_puiTxBuffer) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        RCALL   ??SendMessage
//  393             m_uiFlowControl = END_WAITING_FRAME_TRANSMIT_CONFIRMATION;
        LDI     R16, 8
        STS     ??m_uiFlowControl, R16
//  394         }
//  395         break;
        RJMP    ??Execution_9
//  396 
//  397     case END_WAITING_FRAME_TRANSMIT_CONFIRMATION:
//  398         if (MessageIsSended())
??Execution_8:
        RCALL   ??MessageIsSended
        TST     R16
        BREQ    ??Execution_9
//  399         {
//  400 //            CPlatform::TxLedOff();
//  401             m_uiFlowControl = START_REQUEST;
        LDI     R16, 2
        STS     ??m_uiFlowControl, R16
//  402         }
//  403 
//  404         break;
//  405 
//  406 ////-----------------------------------------------------------------------------------------------------
//  407 //// ModbusMaster
//  408 //    case START_CONFIRMATION:
//  409 //        GetSystemTime();
//  410 //        Reset();
//  411 //        m_uiMessageLength = 0;
//  412 //        m_uiFlowControl = WAITING_MESSAGE_CONFIRMATION;
//  413 //        break;
//  414 //
//  415 //    case WAITING_MESSAGE_CONFIRMATION:
//  416 //        if (Select())
//  417 //        {
//  418 //            iReceivedCounter = Receive(m_puiRxBuffer + m_uiMessageLength, MODBUS_RTU_MAX_ADU_LENGTH - m_uiMessageLength);
//  419 //
//  420 //            if (iReceivedCounter > 0)
//  421 //            {
//  422 //                m_uiMessageLength += iReceivedCounter;
//  423 //                GetSystemTime();
//  424 //                m_uiFlowControl = RECEIVE_MESSAGE_CONFIRMATION;
//  425 //            }
//  426 //            else if (iReceivedCounter == -1)
//  427 //            {
//  428 //                m_uiFlowControl = START_CONFIRMATION;
//  429 //            }
//  430 //        }
//  431 //
//  432 //        if (ConfirmationReceiveTimeIsOver())
//  433 //        {
//  434 //            m_uiFlowControl = START_CONFIRMATION;
//  435 //        }
//  436 //
//  437 //        break;
//  438 //
//  439 //    case RECEIVE_MESSAGE_CONFIRMATION:
//  440 //        if (Select())
//  441 //        {
//  442 //            iReceivedCounter = Receive(m_puiRxBuffer + m_uiMessageLength, MODBUS_RTU_MAX_ADU_LENGTH - m_uiMessageLength);
//  443 //
//  444 //            if (iReceivedCounter > 0)
//  445 //            {
//  446 //                m_uiMessageLength += iReceivedCounter;
//  447 //                GetSystemTime();
//  448 //            }
//  449 //            else if (iReceivedCounter == -1)
//  450 //            {
//  451 //                m_uiFlowControl = START_CONFIRMATION;
//  452 //            }
//  453 //        }
//  454 //
//  455 //        if (FrameIsReceived())
//  456 //        {
//  457 //            if (FrameCheck(m_puiRxBuffer, m_uiMessageLength))
//  458 //            {
//  459 //                m_uiFlowControl = REPLY_CONFIRMATION;
//  460 //            }
//  461 //            else
//  462 //            {
//  463 //                m_uiFlowControl = START_CONFIRMATION;
//  464 //            }
//  465 //        }
//  466 //
//  467 //        break;
//  468 //
//  469 //    case REPLY_CONFIRMATION:
//  470 //        if (Reply(m_puiRxBuffer, m_puiTxBuffer, m_uiMessageLength))
//  471 //        {
//  472 //            CPlatform::TxLedOn();
//  473 //            m_uiFlowControl = FRAME_TRANSMIT_REQUEST;
//  474 //        }
//  475 //        else
//  476 //        {
//  477 //            CPlatform::TxLedOff();
//  478 //            m_uiFlowControl = START_CONFIRMATION;
//  479 //        }
//  480 //        break;
//  481 //
//  482 //    case FRAME_TRANSMIT_REQUEST:
//  483 //        Reset();
//  484 //        GetSystemTime();
//  485 //        m_uiFlowControl = WAITING_FRAME_TRANSMIT_REQUEST;
//  486 //        break;
//  487 //
//  488 //    case WAITING_FRAME_TRANSMIT_REQUEST:
//  489 //        if (TransmitDelayTimeIsOver())
//  490 //        {
//  491 //            SendMessage(m_puiTxBuffer, m_uiMessageLength);
//  492 //            m_uiFlowControl = END_WAITING_FRAME_TRANSMIT_REQUEST;
//  493 //        }
//  494 //        break;
//  495 //
//  496 //    case END_WAITING_FRAME_TRANSMIT_REQUEST:
//  497 //        if (MessageIsSended())
//  498 //        {
//  499 //            CPlatform::TxLedOff();
//  500 //            m_uiFlowControl = START_CONFIRMATION;
//  501 //        }
//  502 //
//  503 //        break;
//  504 
//  505     default:
//  506         break;
//  507     }
//  508 }
??Execution_9:
        LDI     R30, 2
        RJMP    ?EPILOGUE_B2_L09

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        RSEG NEAR_F:CODE:ROOT(0)
        DC8 0, 0

        END
//  509 //-----------------------------------------------------------------------------------------------------
//  510 
//  511 
//  512 
//  513 
//  514 
//  515 
//  516 ////-----------------------------------------------------------------------------------------------------
//  517 //CModbusMasterRTU::CModbusMasterRTU()
//  518 //{
//  519 //
//  520 //}
//  521 //
//  522 ////-----------------------------------------------------------------------------------------------------
//  523 //CModbusMasterRTU::~CModbusMasterRTU()
//  524 //{
//  525 //
//  526 //}
//  527 //
//  528 ////-----------------------------------------------------------------------------------------------------
//  529 //void CModbusMasterRTU::Execution(void)
//  530 //{
//  531 //    int16_t iReceivedCounter;
//  532 //
//  533 //    switch (m_uiFlowControl)
//  534 //    {
//  535 //    case IDDLE:
//  536 //        break;
//  537 //
//  538 //    case START:
//  539 //        Reset();
//  540 //        GetSystemTime();
//  541 //        m_uiMessageLength = 0;
//  542 //        m_uiFlowControl = FRAME_TRANSMIT;
//  543 //        break;
//  544 //
//  545 //    case WAITING_MESSAGE_INDICATION:
//  546 //        if (Select())
//  547 //        {
//  548 //            iReceivedCounter = Receive(m_puiRxBuffer + m_uiMessageLength, MODBUS_RTU_MAX_ADU_LENGTH - m_uiMessageLength);
//  549 //
//  550 //            if (iReceivedCounter > 0)
//  551 //            {
//  552 //                m_uiMessageLength += iReceivedCounter;
//  553 //                GetSystemTime();
//  554 //                m_uiFlowControl = RECEIVE_MESSAGE;
//  555 //            }
//  556 //            else if (iReceivedCounter == -1)
//  557 //            {
//  558 //                m_uiFlowControl = START;
//  559 //            }
//  560 //        }
//  561 //
//  562 //        if (ReceiveTimeIsOver())
//  563 //        {
//  564 //            m_uiFlowControl = START;
//  565 //        }
//  566 //
//  567 //        break;
//  568 //
//  569 //    case START_MESSAGE_CONFIRMATION:
//  570 //        Reset();
//  571 //        GetSystemTime();
//  572 //        m_uiMessageLength = 0;
//  573 //        m_uiFlowControl = WAITING_MESSAGE_CONFIRMATION;
//  574 //        break;
//  575 //
//  576 //    case WAITING_MESSAGE_CONFIRMATION:
//  577 //        if (Select())
//  578 //        {
//  579 //            iReceivedCounter = Receive(m_puiRxBuffer + m_uiMessageLength, MODBUS_RTU_MAX_ADU_LENGTH - m_uiMessageLength);
//  580 //
//  581 //            if (iReceivedCounter > 0)
//  582 //            {
//  583 //                m_uiMessageLength += iReceivedCounter;
//  584 //                GetSystemTime();
//  585 //                m_uiFlowControl = RECEIVE_MESSAGE;
//  586 //            }
//  587 //            else if (iReceivedCounter == -1)
//  588 //            {
//  589 //                m_uiFlowControl = START;
//  590 //            }
//  591 //        }
//  592 //
//  593 //        if (ConfirmationReceiveTimeIsOver())
//  594 //        {
//  595 //            m_uiFlowControl = START;
//  596 //        }
//  597 //
//  598 //        break;
//  599 //
//  600 //    case RECEIVE_MESSAGE:
//  601 //        if (Select())
//  602 //        {
//  603 //            iReceivedCounter = Receive(m_puiRxBuffer + m_uiMessageLength, MODBUS_RTU_MAX_ADU_LENGTH - m_uiMessageLength);
//  604 //
//  605 //            if (iReceivedCounter > 0)
//  606 //            {
//  607 //                m_uiMessageLength += iReceivedCounter;
//  608 //                GetSystemTime();
//  609 //            }
//  610 //            else if (iReceivedCounter == -1)
//  611 //            {
//  612 //                m_uiFlowControl = START;
//  613 //            }
//  614 //        }
//  615 //
//  616 //        if (FrameIsReceived())
//  617 //        {
//  618 //            if (FrameCheck(m_puiRxBuffer, m_uiMessageLength))
//  619 //            {
//  620 //                m_uiFlowControl = REPLY;
//  621 //            }
//  622 //            else
//  623 //            {
//  624 //                m_uiFlowControl = START;
//  625 //            }
//  626 //        }
//  627 //
//  628 //        break;
//  629 //
//  630 //    case REPLY:
//  631 //        if (Reply(m_puiRxBuffer, m_puiTxBuffer, m_uiMessageLength))
//  632 //        {
//  633 //            CPlatform::TxLedOn();
//  634 //            m_uiFlowControl = FRAME_TRANSMIT;
//  635 //        }
//  636 //        else
//  637 //        {
//  638 //            CPlatform::TxLedOff();
//  639 //            m_uiFlowControl = START;
//  640 //        }
//  641 //        break;
//  642 //
//  643 //    case FRAME_TRANSMIT:
//  644 //        Reset();
//  645 //        GetSystemTime();
//  646 //        m_uiFlowControl = WAITING_FRAME_TRANSMIT;
//  647 //        break;
//  648 //
//  649 //    case WAITING_FRAME_TRANSMIT:
//  650 //        if (TransmitDelayTimeIsOver())
//  651 //        {
//  652 //            SendMessage(m_puiTxBuffer, m_uiMessageLength);
//  653 //            m_uiFlowControl = FRAME_TRANSMIT_END_WAITING;
//  654 //        }
//  655 //        break;
//  656 //
//  657 //    case FRAME_TRANSMIT_END_WAITING:
//  658 //        if (MessageIsSended())
//  659 //        {
//  660 //            CPlatform::TxLedOff();
//  661 //            m_uiFlowControl = IDDLE;
//  662 //        }
//  663 //
//  664 //        break;
//  665 //
//  666 //    default:
//  667 //        break;
//  668 //    }
//  669 //}
// 
//    87 bytes in segment ABSOLUTE
// 1 028 bytes in segment CODE
//     6 bytes in segment INITTAB
//     2 bytes in segment NEAR_F
//     9 bytes in segment NEAR_Z
// 
// 998 bytes of CODE memory (+ 38 bytes shared)
//   9 bytes of DATA memory (+ 87 bytes shared)
//
//Errors: none
//Warnings: 9
